// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "csrealtimedata-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // csrealtimedata
  //

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  persist_statement_name[] = "persist_csrealtimedata";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  find_statement_name[] = "find_csrealtimedata";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  update_statement_name[] = "update_csrealtimedata";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  erase_statement_name[] = "erase_csrealtimedata";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  query_statement_name[] = "query_csrealtimedata";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  erase_query_statement_name[] = "erase_query_csrealtimedata";

  const unsigned int access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::float8_oid,
    pgsql::float8_oid,
    pgsql::float8_oid,
    pgsql::int2_oid,
    pgsql::int2_oid,
    pgsql::float8_oid,
    pgsql::int2_oid,
    pgsql::float8_oid,
    pgsql::float8_oid,
    pgsql::float8_oid
  };

  const unsigned int access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::float8_oid,
    pgsql::float8_oid,
    pgsql::float8_oid,
    pgsql::int2_oid,
    pgsql::int2_oid,
    pgsql::float8_oid,
    pgsql::int2_oid,
    pgsql::float8_oid,
    pgsql::float8_oid,
    pgsql::float8_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::csrealtimedata, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  bool access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // emerealtimedata base
    //
    if (object_traits_impl< ::emerealtimedata, id_pgsql >::grow (
          i, t + 0UL))
      grew = true;

    // _RelSkyT
    //
    t[3UL] = 0;

    // _AmbientT
    //
    t[4UL] = 0;

    // _SensorT
    //
    t[5UL] = 0;

    // _RainF
    //
    t[6UL] = 0;

    // _RainThreshV
    //
    t[7UL] = 0;

    // _wind
    //
    t[8UL] = 0;

    // _WindUnits
    //
    t[9UL] = 0;

    // _HumidityPercent
    //
    t[10UL] = 0;

    // _DewPointT
    //
    t[11UL] = 0;

    // _DayLightV
    //
    t[12UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // emerealtimedata base
    //
    object_traits_impl< ::emerealtimedata, id_pgsql >::bind (b + n, i, sk);
    n += sk == statement_select ? 3UL : 2UL;

    // _RelSkyT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._RelSkyT_value;
    b[n].is_null = &i._RelSkyT_null;
    n++;

    // _AmbientT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._AmbientT_value;
    b[n].is_null = &i._AmbientT_null;
    n++;

    // _SensorT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._SensorT_value;
    b[n].is_null = &i._SensorT_null;
    n++;

    // _RainF
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._RainF_value;
    b[n].is_null = &i._RainF_null;
    n++;

    // _RainThreshV
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._RainThreshV_value;
    b[n].is_null = &i._RainThreshV_null;
    n++;

    // _wind
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._wind_value;
    b[n].is_null = &i._wind_null;
    n++;

    // _WindUnits
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._WindUnits_value;
    b[n].is_null = &i._WindUnits_null;
    n++;

    // _HumidityPercent
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._HumidityPercent_value;
    b[n].is_null = &i._HumidityPercent_null;
    n++;

    // _DewPointT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._DewPointT_value;
    b[n].is_null = &i._DewPointT_null;
    n++;

    // _DayLightV
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._DayLightV_value;
    b[n].is_null = &i._DayLightV_null;
    n++;
  }

  bool access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // emerealtimedata base
    //
    if (object_traits_impl< ::emerealtimedata, id_pgsql >::init (i, o, sk))
      grew = true;

    // _RelSkyT
    //
    {
      double const& v =
        o._RelSkyT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._RelSkyT_value, is_null, v);
      i._RelSkyT_null = is_null;
    }

    // _AmbientT
    //
    {
      double const& v =
        o._AmbientT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._AmbientT_value, is_null, v);
      i._AmbientT_null = is_null;
    }

    // _SensorT
    //
    {
      double const& v =
        o._SensorT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._SensorT_value, is_null, v);
      i._SensorT_null = is_null;
    }

    // _RainF
    //
    {
      short unsigned int const& v =
        o._RainF;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._RainF_value, is_null, v);
      i._RainF_null = is_null;
    }

    // _RainThreshV
    //
    {
      short unsigned int const& v =
        o._RainThreshV;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._RainThreshV_value, is_null, v);
      i._RainThreshV_null = is_null;
    }

    // _wind
    //
    {
      double const& v =
        o._wind;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._wind_value, is_null, v);
      i._wind_null = is_null;
    }

    // _WindUnits
    //
    {
      short unsigned int const& v =
        o._WindUnits;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._WindUnits_value, is_null, v);
      i._WindUnits_null = is_null;
    }

    // _HumidityPercent
    //
    {
      double const& v =
        o._HumidityPercent;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._HumidityPercent_value, is_null, v);
      i._HumidityPercent_null = is_null;
    }

    // _DewPointT
    //
    {
      double const& v =
        o._DewPointT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._DewPointT_value, is_null, v);
      i._DewPointT_null = is_null;
    }

    // _DayLightV
    //
    {
      double const& v =
        o._DayLightV;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._DayLightV_value, is_null, v);
      i._DayLightV_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // emerealtimedata base
    //
    object_traits_impl< ::emerealtimedata, id_pgsql >::init (o, i, db);

    // _RelSkyT
    //
    {
      double& v =
        o._RelSkyT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._RelSkyT_value,
        i._RelSkyT_null);
    }

    // _AmbientT
    //
    {
      double& v =
        o._AmbientT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._AmbientT_value,
        i._AmbientT_null);
    }

    // _SensorT
    //
    {
      double& v =
        o._SensorT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._SensorT_value,
        i._SensorT_null);
    }

    // _RainF
    //
    {
      short unsigned int& v =
        o._RainF;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._RainF_value,
        i._RainF_null);
    }

    // _RainThreshV
    //
    {
      short unsigned int& v =
        o._RainThreshV;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._RainThreshV_value,
        i._RainThreshV_null);
    }

    // _wind
    //
    {
      double& v =
        o._wind;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._wind_value,
        i._wind_null);
    }

    // _WindUnits
    //
    {
      short unsigned int& v =
        o._WindUnits;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._WindUnits_value,
        i._WindUnits_null);
    }

    // _HumidityPercent
    //
    {
      double& v =
        o._HumidityPercent;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._HumidityPercent_value,
        i._HumidityPercent_null);
    }

    // _DewPointT
    //
    {
      double& v =
        o._DewPointT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._DewPointT_value,
        i._DewPointT_null);
    }

    // _DayLightV
    //
    {
      double& v =
        o._DayLightV;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._DayLightV_value,
        i._DayLightV_null);
    }
  }

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::persist_statement[] =
  "INSERT INTO \"csrealtimedata\" "
  "(\"id\", "
  "\"sec\", "
  "\"msec\", "
  "\"RelSkyT\", "
  "\"AmbientT\", "
  "\"SensorT\", "
  "\"RainF\", "
  "\"RainThreshV\", "
  "\"wind\", "
  "\"WindUnits\", "
  "\"HumidityPercent\", "
  "\"DewPointT\", "
  "\"DayLightV\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::find_statement[] =
  "SELECT "
  "\"csrealtimedata\".\"id\", "
  "\"csrealtimedata\".\"sec\", "
  "\"csrealtimedata\".\"msec\", "
  "\"csrealtimedata\".\"RelSkyT\", "
  "\"csrealtimedata\".\"AmbientT\", "
  "\"csrealtimedata\".\"SensorT\", "
  "\"csrealtimedata\".\"RainF\", "
  "\"csrealtimedata\".\"RainThreshV\", "
  "\"csrealtimedata\".\"wind\", "
  "\"csrealtimedata\".\"WindUnits\", "
  "\"csrealtimedata\".\"HumidityPercent\", "
  "\"csrealtimedata\".\"DewPointT\", "
  "\"csrealtimedata\".\"DayLightV\" "
  "FROM \"csrealtimedata\" "
  "WHERE \"csrealtimedata\".\"id\"=$1";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::update_statement[] =
  "UPDATE \"csrealtimedata\" "
  "SET "
  "\"sec\"=$1, "
  "\"msec\"=$2, "
  "\"RelSkyT\"=$3, "
  "\"AmbientT\"=$4, "
  "\"SensorT\"=$5, "
  "\"RainF\"=$6, "
  "\"RainThreshV\"=$7, "
  "\"wind\"=$8, "
  "\"WindUnits\"=$9, "
  "\"HumidityPercent\"=$10, "
  "\"DewPointT\"=$11, "
  "\"DayLightV\"=$12 "
  "WHERE \"id\"=$13";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::erase_statement[] =
  "DELETE FROM \"csrealtimedata\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::query_statement[] =
  "SELECT "
  "\"csrealtimedata\".\"id\", "
  "\"csrealtimedata\".\"sec\", "
  "\"csrealtimedata\".\"msec\", "
  "\"csrealtimedata\".\"RelSkyT\", "
  "\"csrealtimedata\".\"AmbientT\", "
  "\"csrealtimedata\".\"SensorT\", "
  "\"csrealtimedata\".\"RainF\", "
  "\"csrealtimedata\".\"RainThreshV\", "
  "\"csrealtimedata\".\"wind\", "
  "\"csrealtimedata\".\"WindUnits\", "
  "\"csrealtimedata\".\"HumidityPercent\", "
  "\"csrealtimedata\".\"DewPointT\", "
  "\"csrealtimedata\".\"DayLightV\" "
  "FROM \"csrealtimedata\"";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"csrealtimedata\"";

  const char access::object_traits_impl< ::csrealtimedata, id_pgsql >::table_name[] =
  "\"csrealtimedata\"";

  void access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj._id = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj._id);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::csrealtimedata, id_pgsql >::pointer_type
  access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj._id);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::csrealtimedata, id_pgsql >::object_type >
  access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::csrealtimedata, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

namespace odb
{
  static bool
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          return true;
        }
        case 2:
        {
          db.execute ("DROP TABLE IF EXISTS \"csrealtimedata\" CASCADE");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"csrealtimedata\" (\n"
                      "  \"id\" BIGSERIAL NOT NULL PRIMARY KEY,\n"
                      "  \"sec\" INTEGER NOT NULL,\n"
                      "  \"msec\" INTEGER NOT NULL,\n"
                      "  \"RelSkyT\" DOUBLE PRECISION NOT NULL,\n"
                      "  \"AmbientT\" DOUBLE PRECISION NOT NULL,\n"
                      "  \"SensorT\" DOUBLE PRECISION NOT NULL,\n"
                      "  \"RainF\" SMALLINT NOT NULL,\n"
                      "  \"RainThreshV\" SMALLINT NOT NULL,\n"
                      "  \"wind\" DOUBLE PRECISION NOT NULL,\n"
                      "  \"WindUnits\" SMALLINT NOT NULL,\n"
                      "  \"HumidityPercent\" DOUBLE PRECISION NOT NULL,\n"
                      "  \"DewPointT\" DOUBLE PRECISION NOT NULL,\n"
                      "  \"DayLightV\" DOUBLE PRECISION NOT NULL)");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_create_entry
  create_schema_entry_ (
    id_pgsql,
    "",
    &create_schema);
}

#include <odb/post.hxx>
