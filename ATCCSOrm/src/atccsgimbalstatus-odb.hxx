// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ATCCSGIMBALSTATUS_ODB_HXX
#define ATCCSGIMBALSTATUS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "atccsgimbalstatus.h"

#include "atccspublicstatus-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // atccsgimbalstatus
  //
  template <>
  struct class_traits< ::atccsgimbalstatus >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::atccsgimbalstatus >
  {
    public:
    typedef ::atccsgimbalstatus object_type;
    typedef ::atccsgimbalstatus* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::atccspublicstatus >::id_type id_type;

    static const bool auto_id = object_traits< ::atccspublicstatus >::auto_id;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // atccsgimbalstatus
  //
  template <typename A>
  struct query_columns< ::atccsgimbalstatus, id_pgsql, A >:
    query_columns< ::atccspublicstatus, id_pgsql, A >
  {
    // atccspublicstatus
    //
    typedef query_columns< ::atccspublicstatus, id_pgsql, A > atccspublicstatus;

    // trackObjectName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    trackObjectName_type_;

    static const trackObjectName_type_ trackObjectName;

    // siderealTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    siderealTime_type_;

    static const siderealTime_type_ siderealTime;

    // hourAngle
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    hourAngle_type_;

    static const hourAngle_type_ hourAngle;

    // rightAscension
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    rightAscension_type_;

    static const rightAscension_type_ rightAscension;

    // declination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    declination_type_;

    static const declination_type_ declination;

    // J2000RightAscension
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    J2000RightAscension_type_;

    static const J2000RightAscension_type_ J2000RightAscension;

    // J2000Declination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    J2000Declination_type_;

    static const J2000Declination_type_ J2000Declination;

    // azmiuth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    azmiuth_type_;

    static const azmiuth_type_ azmiuth;

    // elevation
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    elevation_type_;

    static const elevation_type_ elevation;

    // derotatorPositon
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    derotatorPositon_type_;

    static const derotatorPositon_type_ derotatorPositon;

    // targetRightAscension
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetRightAscension_type_;

    static const targetRightAscension_type_ targetRightAscension;

    // targetDeclination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetDeclination_type_;

    static const targetDeclination_type_ targetDeclination;

    // targetJ2000RightAscension
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetJ2000RightAscension_type_;

    static const targetJ2000RightAscension_type_ targetJ2000RightAscension;

    // targetJ2000Declination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetJ2000Declination_type_;

    static const targetJ2000Declination_type_ targetJ2000Declination;

    // targetAzmiuth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetAzmiuth_type_;

    static const targetAzmiuth_type_ targetAzmiuth;

    // targetElevation
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetElevation_type_;

    static const targetElevation_type_ targetElevation;

    // targetDerotatorPosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetDerotatorPosition_type_;

    static const targetDerotatorPosition_type_ targetDerotatorPosition;

    // axis1TrackError
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis1TrackError_type_;

    static const axis1TrackError_type_ axis1TrackError;

    // axis2TrackError
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis2TrackError_type_;

    static const axis2TrackError_type_ axis2TrackError;

    // axis3TrackError
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis3TrackError_type_;

    static const axis3TrackError_type_ axis3TrackError;

    // axis4Angle
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis4Angle_type_;

    static const axis4Angle_type_ axis4Angle;

    // coverPosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    coverPosition_type_;

    static const coverPosition_type_ coverPosition;

    // targetAxis4Angle
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetAxis4Angle_type_;

    static const targetAxis4Angle_type_ targetAxis4Angle;

    // axis1Speed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis1Speed_type_;

    static const axis1Speed_type_ axis1Speed;

    // axis2Speed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis2Speed_type_;

    static const axis2Speed_type_ axis2Speed;

    // axis3Speed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis3Speed_type_;

    static const axis3Speed_type_ axis3Speed;

    // refractionCorrection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    refractionCorrection_type_;

    static const refractionCorrection_type_ refractionCorrection;

    // axis1Encoder
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis1Encoder_type_;

    static const axis1Encoder_type_ axis1Encoder;

    // axis2Encoder
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis2Encoder_type_;

    static const axis2Encoder_type_ axis2Encoder;

    // axis3Encoder
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis3Encoder_type_;

    static const axis3Encoder_type_ axis3Encoder;

    // axis1PMCorrection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis1PMCorrection_type_;

    static const axis1PMCorrection_type_ axis1PMCorrection;

    // axis2PMCorrection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis2PMCorrection_type_;

    static const axis2PMCorrection_type_ axis2PMCorrection;

    // axis3PMCorrection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis3PMCorrection_type_;

    static const axis3PMCorrection_type_ axis3PMCorrection;

    // axis1ManualCorrection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis1ManualCorrection_type_;

    static const axis1ManualCorrection_type_ axis1ManualCorrection;

    // axis2ManualCorrection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis2ManualCorrection_type_;

    static const axis2ManualCorrection_type_ axis2ManualCorrection;

    // axis3ManualCorrection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    axis3ManualCorrection_type_;

    static const axis3ManualCorrection_type_ axis3ManualCorrection;

    // temperature1
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature1_type_;

    static const temperature1_type_ temperature1;

    // temperature2
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature2_type_;

    static const temperature2_type_ temperature2;

    // temperature3
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature3_type_;

    static const temperature3_type_ temperature3;

    // temperature4
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature4_type_;

    static const temperature4_type_ temperature4;

    // temperature5
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature5_type_;

    static const temperature5_type_ temperature5;

    // temperature6
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature6_type_;

    static const temperature6_type_ temperature6;

    // temperature7
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature7_type_;

    static const temperature7_type_ temperature7;

    // temperature8
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature8_type_;

    static const temperature8_type_ temperature8;

    // temperature9
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature9_type_;

    static const temperature9_type_ temperature9;

    // temperature10
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature10_type_;

    static const temperature10_type_ temperature10;

    // temperature11
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature11_type_;

    static const temperature11_type_ temperature11;

    // temperature12
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature12_type_;

    static const temperature12_type_ temperature12;

    // humidity1
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity1_type_;

    static const humidity1_type_ humidity1;

    // humidity2
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity2_type_;

    static const humidity2_type_ humidity2;

    // humidity3
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity3_type_;

    static const humidity3_type_ humidity3;

    // humidity4
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity4_type_;

    static const humidity4_type_ humidity4;

    // humidity5
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity5_type_;

    static const humidity5_type_ humidity5;

    // humidity6
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity6_type_;

    static const humidity6_type_ humidity6;

    // humidity7
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity7_type_;

    static const humidity7_type_ humidity7;

    // humidity8
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity8_type_;

    static const humidity8_type_ humidity8;

    // humidity9
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity9_type_;

    static const humidity9_type_ humidity9;

    // humidity10
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity10_type_;

    static const humidity10_type_ humidity10;

    // humidity11
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity11_type_;

    static const humidity11_type_ humidity11;

    // humidity12
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity12_type_;

    static const humidity12_type_ humidity12;

    // focusTypeIndex
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    focusTypeIndex_type_;

    static const focusTypeIndex_type_ focusTypeIndex;

    // coverIndex
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    coverIndex_type_;

    static const coverIndex_type_ coverIndex;

    // targetFocusTypeIndex
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    targetFocusTypeIndex_type_;

    static const targetFocusTypeIndex_type_ targetFocusTypeIndex;

    // targetCoverIndex
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    targetCoverIndex_type_;

    static const targetCoverIndex_type_ targetCoverIndex;

    // trackType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    trackType_type_;

    static const trackType_type_ trackType;

    // axis3Mode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    axis3Mode_type_;

    static const axis3Mode_type_ axis3Mode;

    // pieSide
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    pieSide_type_;

    static const pieSide_type_ pieSide;

    // targetPieSide
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    targetPieSide_type_;

    static const targetPieSide_type_ targetPieSide;

    // isAxis1FindHome
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isAxis1FindHome_type_;

    static const isAxis1FindHome_type_ isAxis1FindHome;

    // isAxis2FindHome
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isAxis2FindHome_type_;

    static const isAxis2FindHome_type_ isAxis2FindHome;

    // isAxis3FindHome
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isAxis3FindHome_type_;

    static const isAxis3FindHome_type_ isAxis3FindHome;
  };

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::trackObjectName_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  trackObjectName (A::table_name, "\"trackObjectName\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::siderealTime_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  siderealTime (A::table_name, "\"siderealTime\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::hourAngle_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  hourAngle (A::table_name, "\"hourAngle\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::rightAscension_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  rightAscension (A::table_name, "\"rightAscension\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::declination_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  declination (A::table_name, "\"declination\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::J2000RightAscension_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  J2000RightAscension (A::table_name, "\"J2000RightAscension\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::J2000Declination_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  J2000Declination (A::table_name, "\"J2000Declination\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::azmiuth_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  azmiuth (A::table_name, "\"azmiuth\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::elevation_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  elevation (A::table_name, "\"elevation\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::derotatorPositon_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  derotatorPositon (A::table_name, "\"derotatorPositon\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetRightAscension_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetRightAscension (A::table_name, "\"targetRightAscension\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetDeclination_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetDeclination (A::table_name, "\"targetDeclination\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetJ2000RightAscension_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetJ2000RightAscension (A::table_name, "\"targetJ2000RightAscension\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetJ2000Declination_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetJ2000Declination (A::table_name, "\"targetJ2000Declination\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetAzmiuth_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetAzmiuth (A::table_name, "\"targetAzmiuth\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetElevation_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetElevation (A::table_name, "\"targetElevation\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetDerotatorPosition_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetDerotatorPosition (A::table_name, "\"targetDerotatorPosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis1TrackError_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis1TrackError (A::table_name, "\"axis1TrackError\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis2TrackError_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis2TrackError (A::table_name, "\"axis2TrackError\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis3TrackError_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis3TrackError (A::table_name, "\"axis3TrackError\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis4Angle_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis4Angle (A::table_name, "\"axis4Angle\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::coverPosition_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  coverPosition (A::table_name, "\"coverPosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetAxis4Angle_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetAxis4Angle (A::table_name, "\"targetAxis4Angle\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis1Speed_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis1Speed (A::table_name, "\"axis1Speed\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis2Speed_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis2Speed (A::table_name, "\"axis2Speed\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis3Speed_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis3Speed (A::table_name, "\"axis3Speed\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::refractionCorrection_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  refractionCorrection (A::table_name, "\"refractionCorrection\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis1Encoder_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis1Encoder (A::table_name, "\"axis1Encoder\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis2Encoder_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis2Encoder (A::table_name, "\"axis2Encoder\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis3Encoder_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis3Encoder (A::table_name, "\"axis3Encoder\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis1PMCorrection_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis1PMCorrection (A::table_name, "\"axis1PMCorrection\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis2PMCorrection_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis2PMCorrection (A::table_name, "\"axis2PMCorrection\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis3PMCorrection_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis3PMCorrection (A::table_name, "\"axis3PMCorrection\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis1ManualCorrection_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis1ManualCorrection (A::table_name, "\"axis1ManualCorrection\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis2ManualCorrection_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis2ManualCorrection (A::table_name, "\"axis2ManualCorrection\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis3ManualCorrection_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis3ManualCorrection (A::table_name, "\"axis3ManualCorrection\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature1_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature1 (A::table_name, "\"temperature1\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature2_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature2 (A::table_name, "\"temperature2\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature3_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature3 (A::table_name, "\"temperature3\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature4_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature4 (A::table_name, "\"temperature4\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature5_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature5 (A::table_name, "\"temperature5\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature6_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature6 (A::table_name, "\"temperature6\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature7_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature7 (A::table_name, "\"temperature7\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature8_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature8 (A::table_name, "\"temperature8\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature9_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature9 (A::table_name, "\"temperature9\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature10_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature10 (A::table_name, "\"temperature10\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature11_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature11 (A::table_name, "\"temperature11\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::temperature12_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  temperature12 (A::table_name, "\"temperature12\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity1_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity1 (A::table_name, "\"humidity1\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity2_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity2 (A::table_name, "\"humidity2\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity3_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity3 (A::table_name, "\"humidity3\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity4_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity4 (A::table_name, "\"humidity4\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity5_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity5 (A::table_name, "\"humidity5\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity6_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity6 (A::table_name, "\"humidity6\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity7_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity7 (A::table_name, "\"humidity7\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity8_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity8 (A::table_name, "\"humidity8\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity9_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity9 (A::table_name, "\"humidity9\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity10_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity10 (A::table_name, "\"humidity10\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity11_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity11 (A::table_name, "\"humidity11\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::humidity12_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  humidity12 (A::table_name, "\"humidity12\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::focusTypeIndex_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  focusTypeIndex (A::table_name, "\"focusTypeIndex\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::coverIndex_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  coverIndex (A::table_name, "\"coverIndex\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetFocusTypeIndex_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetFocusTypeIndex (A::table_name, "\"targetFocusTypeIndex\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetCoverIndex_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetCoverIndex (A::table_name, "\"targetCoverIndex\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::trackType_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  trackType (A::table_name, "\"trackType\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::axis3Mode_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  axis3Mode (A::table_name, "\"axis3Mode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::pieSide_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  pieSide (A::table_name, "\"pieSide\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::targetPieSide_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  targetPieSide (A::table_name, "\"targetPieSide\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::isAxis1FindHome_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  isAxis1FindHome (A::table_name, "\"isAxis1FindHome\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::isAxis2FindHome_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  isAxis2FindHome (A::table_name, "\"isAxis2FindHome\"", 0);

  template <typename A>
  const typename query_columns< ::atccsgimbalstatus, id_pgsql, A >::isAxis3FindHome_type_
  query_columns< ::atccsgimbalstatus, id_pgsql, A >::
  isAxis3FindHome (A::table_name, "\"isAxis3FindHome\"", 0);

  template <typename A>
  struct pointer_query_columns< ::atccsgimbalstatus, id_pgsql, A >:
    query_columns< ::atccsgimbalstatus, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::atccsgimbalstatus, id_pgsql >:
    public access::object_traits< ::atccsgimbalstatus >
  {
    public:
    typedef object_traits_impl< ::atccspublicstatus, id_pgsql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::atccspublicstatus, id_pgsql >::image_type
    {
      // _trackObjectName
      //
      details::buffer _trackObjectName_value;
      std::size_t _trackObjectName_size;
      bool _trackObjectName_null;

      // _siderealTime
      //
      double _siderealTime_value;
      bool _siderealTime_null;

      // _hourAngle
      //
      double _hourAngle_value;
      bool _hourAngle_null;

      // _rightAscension
      //
      double _rightAscension_value;
      bool _rightAscension_null;

      // _declination
      //
      double _declination_value;
      bool _declination_null;

      // _J2000RightAscension
      //
      double _J2000RightAscension_value;
      bool _J2000RightAscension_null;

      // _J2000Declination
      //
      double _J2000Declination_value;
      bool _J2000Declination_null;

      // _azmiuth
      //
      double _azmiuth_value;
      bool _azmiuth_null;

      // _elevation
      //
      double _elevation_value;
      bool _elevation_null;

      // _derotatorPositon
      //
      double _derotatorPositon_value;
      bool _derotatorPositon_null;

      // _targetRightAscension
      //
      double _targetRightAscension_value;
      bool _targetRightAscension_null;

      // _targetDeclination
      //
      double _targetDeclination_value;
      bool _targetDeclination_null;

      // _targetJ2000RightAscension
      //
      double _targetJ2000RightAscension_value;
      bool _targetJ2000RightAscension_null;

      // _targetJ2000Declination
      //
      double _targetJ2000Declination_value;
      bool _targetJ2000Declination_null;

      // _targetAzmiuth
      //
      double _targetAzmiuth_value;
      bool _targetAzmiuth_null;

      // _targetElevation
      //
      double _targetElevation_value;
      bool _targetElevation_null;

      // _targetDerotatorPosition
      //
      double _targetDerotatorPosition_value;
      bool _targetDerotatorPosition_null;

      // _axis1TrackError
      //
      double _axis1TrackError_value;
      bool _axis1TrackError_null;

      // _axis2TrackError
      //
      double _axis2TrackError_value;
      bool _axis2TrackError_null;

      // _axis3TrackError
      //
      double _axis3TrackError_value;
      bool _axis3TrackError_null;

      // _axis4Angle
      //
      double _axis4Angle_value;
      bool _axis4Angle_null;

      // _coverPosition
      //
      double _coverPosition_value;
      bool _coverPosition_null;

      // _targetAxis4Angle
      //
      double _targetAxis4Angle_value;
      bool _targetAxis4Angle_null;

      // _axis1Speed
      //
      double _axis1Speed_value;
      bool _axis1Speed_null;

      // _axis2Speed
      //
      double _axis2Speed_value;
      bool _axis2Speed_null;

      // _axis3Speed
      //
      double _axis3Speed_value;
      bool _axis3Speed_null;

      // _refractionCorrection
      //
      double _refractionCorrection_value;
      bool _refractionCorrection_null;

      // _axis1Encoder
      //
      double _axis1Encoder_value;
      bool _axis1Encoder_null;

      // _axis2Encoder
      //
      double _axis2Encoder_value;
      bool _axis2Encoder_null;

      // _axis3Encoder
      //
      double _axis3Encoder_value;
      bool _axis3Encoder_null;

      // _axis1PMCorrection
      //
      double _axis1PMCorrection_value;
      bool _axis1PMCorrection_null;

      // _axis2PMCorrection
      //
      double _axis2PMCorrection_value;
      bool _axis2PMCorrection_null;

      // _axis3PMCorrection
      //
      double _axis3PMCorrection_value;
      bool _axis3PMCorrection_null;

      // _axis1ManualCorrection
      //
      double _axis1ManualCorrection_value;
      bool _axis1ManualCorrection_null;

      // _axis2ManualCorrection
      //
      double _axis2ManualCorrection_value;
      bool _axis2ManualCorrection_null;

      // _axis3ManualCorrection
      //
      double _axis3ManualCorrection_value;
      bool _axis3ManualCorrection_null;

      // _temperature1
      //
      double _temperature1_value;
      bool _temperature1_null;

      // _temperature2
      //
      double _temperature2_value;
      bool _temperature2_null;

      // _temperature3
      //
      double _temperature3_value;
      bool _temperature3_null;

      // _temperature4
      //
      double _temperature4_value;
      bool _temperature4_null;

      // _temperature5
      //
      double _temperature5_value;
      bool _temperature5_null;

      // _temperature6
      //
      double _temperature6_value;
      bool _temperature6_null;

      // _temperature7
      //
      double _temperature7_value;
      bool _temperature7_null;

      // _temperature8
      //
      double _temperature8_value;
      bool _temperature8_null;

      // _temperature9
      //
      double _temperature9_value;
      bool _temperature9_null;

      // _temperature10
      //
      double _temperature10_value;
      bool _temperature10_null;

      // _temperature11
      //
      double _temperature11_value;
      bool _temperature11_null;

      // _temperature12
      //
      double _temperature12_value;
      bool _temperature12_null;

      // _humidity1
      //
      double _humidity1_value;
      bool _humidity1_null;

      // _humidity2
      //
      double _humidity2_value;
      bool _humidity2_null;

      // _humidity3
      //
      double _humidity3_value;
      bool _humidity3_null;

      // _humidity4
      //
      double _humidity4_value;
      bool _humidity4_null;

      // _humidity5
      //
      double _humidity5_value;
      bool _humidity5_null;

      // _humidity6
      //
      double _humidity6_value;
      bool _humidity6_null;

      // _humidity7
      //
      double _humidity7_value;
      bool _humidity7_null;

      // _humidity8
      //
      double _humidity8_value;
      bool _humidity8_null;

      // _humidity9
      //
      double _humidity9_value;
      bool _humidity9_null;

      // _humidity10
      //
      double _humidity10_value;
      bool _humidity10_null;

      // _humidity11
      //
      double _humidity11_value;
      bool _humidity11_null;

      // _humidity12
      //
      double _humidity12_value;
      bool _humidity12_null;

      // _focusTypeIndex
      //
      short _focusTypeIndex_value;
      bool _focusTypeIndex_null;

      // _coverIndex
      //
      short _coverIndex_value;
      bool _coverIndex_null;

      // _targetFocusTypeIndex
      //
      short _targetFocusTypeIndex_value;
      bool _targetFocusTypeIndex_null;

      // _targetCoverIndex
      //
      short _targetCoverIndex_value;
      bool _targetCoverIndex_null;

      // _trackType
      //
      short _trackType_value;
      bool _trackType_null;

      // _axis3Mode
      //
      short _axis3Mode_value;
      bool _axis3Mode_null;

      // _pieSide
      //
      short _pieSide_value;
      bool _pieSide_null;

      // _targetPieSide
      //
      short _targetPieSide_value;
      bool _targetPieSide_null;

      // _isAxis1FindHome
      //
      short _isAxis1FindHome_value;
      bool _isAxis1FindHome_null;

      // _isAxis2FindHome
      //
      short _isAxis2FindHome_value;
      bool _isAxis2FindHome_null;

      // _isAxis3FindHome
      //
      short _isAxis3FindHome_value;
      bool _isAxis3FindHome_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // atccsgimbalstatus
  //
}

#include "atccsgimbalstatus-odb.ixx"

#include <odb/post.hxx>

#endif // ATCCSGIMBALSTATUS_ODB_HXX
