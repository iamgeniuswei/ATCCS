// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ATCCSINSTRUCTION_ODB_HXX
#define ATCCSINSTRUCTION_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "atccsinstruction.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // atccsinstruction
  //
  template <>
  struct class_traits< ::atccsinstruction >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::atccsinstruction >
  {
    public:
    typedef ::atccsinstruction object_type;
    typedef ::atccsinstruction* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // atccsinstruction
  //
  template <typename A>
  struct query_columns< ::atccsinstruction, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // sec
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    sec_type_;

    static const sec_type_ sec;

    // msec
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    msec_type_;

    static const msec_type_ msec;

    // user
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    user_type_;

    static const user_type_ user;

    // at
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    at_type_;

    static const at_type_ at;

    // device
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    device_type_;

    static const device_type_ device;

    // sequence
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    sequence_type_;

    static const sequence_type_ sequence;

    // timeout
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    timeout_type_;

    static const timeout_type_ timeout;

    // plan
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    plan_type_;

    static const plan_type_ plan;

    // instruction
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    instruction_type_;

    static const instruction_type_ instruction;

    // param
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    param_type_;

    static const param_type_ param;

    // result
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    result_type_;

    static const result_type_ result;
  };

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::id_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::sec_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  sec (A::table_name, "\"sec\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::msec_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  msec (A::table_name, "\"msec\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::user_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  user (A::table_name, "\"user\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::at_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  at (A::table_name, "\"at\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::device_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  device (A::table_name, "\"device\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::sequence_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  sequence (A::table_name, "\"sequence\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::timeout_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  timeout (A::table_name, "\"timeout\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::plan_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  plan (A::table_name, "\"plan\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::instruction_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  instruction (A::table_name, "\"instruction\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::param_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  param (A::table_name, "\"param\"", 0);

  template <typename A>
  const typename query_columns< ::atccsinstruction, id_pgsql, A >::result_type_
  query_columns< ::atccsinstruction, id_pgsql, A >::
  result (A::table_name, "\"result\"", 0);

  template <typename A>
  struct pointer_query_columns< ::atccsinstruction, id_pgsql, A >:
    query_columns< ::atccsinstruction, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::atccsinstruction, id_pgsql >:
    public access::object_traits< ::atccsinstruction >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _id
      //
      long long _id_value;
      bool _id_null;

      // _sec
      //
      int _sec_value;
      bool _sec_null;

      // _msec
      //
      int _msec_value;
      bool _msec_null;

      // _user
      //
      int _user_value;
      bool _user_null;

      // _at
      //
      short _at_value;
      bool _at_null;

      // _device
      //
      short _device_value;
      bool _device_null;

      // _sequence
      //
      int _sequence_value;
      bool _sequence_null;

      // _timeout
      //
      int _timeout_value;
      bool _timeout_null;

      // _plan
      //
      int _plan_value;
      bool _plan_null;

      // _instruction
      //
      int _instruction_value;
      bool _instruction_null;

      // _param
      //
      details::buffer _param_value;
      std::size_t _param_size;
      bool _param_null;

      // _result
      //
      int _result_value;
      bool _result_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // atccsinstruction
  //
}

#include "atccsinstruction-odb.ixx"

#include <odb/post.hxx>

#endif // ATCCSINSTRUCTION_ODB_HXX
