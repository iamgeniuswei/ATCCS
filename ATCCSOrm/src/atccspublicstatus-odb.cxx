// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "atccspublicstatus-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // atccspublicstatus
  //

  access::object_traits_impl< ::atccspublicstatus, id_pgsql >::id_type
  access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::atccspublicstatus, id_pgsql >::id_type
  access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i._id_value,
        i._id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // _id
    //
    t[0UL] = 0;

    // _sec
    //
    t[1UL] = 0;

    // _msec
    //
    t[2UL] = 0;

    // _curstatus
    //
    t[3UL] = 0;

    // _lastStatus
    //
    t[4UL] = 0;

    // _warning
    //
    t[5UL] = 0;

    // _error
    //
    t[6UL] = 0;

    // _errorString
    //
    if (t[7UL])
    {
      i._errorString_value.capacity (i._errorString_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // _id
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i._id_value;
      b[n].is_null = &i._id_null;
      n++;
    }

    // _sec
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._sec_value;
    b[n].is_null = &i._sec_null;
    n++;

    // _msec
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._msec_value;
    b[n].is_null = &i._msec_null;
    n++;

    // _curstatus
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._curstatus_value;
    b[n].is_null = &i._curstatus_null;
    n++;

    // _lastStatus
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._lastStatus_value;
    b[n].is_null = &i._lastStatus_null;
    n++;

    // _warning
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i._warning_value;
    b[n].is_null = &i._warning_null;
    n++;

    // _error
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i._error_value;
    b[n].is_null = &i._error_null;
    n++;

    // _errorString
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._errorString_value.data ();
    b[n].capacity = i._errorString_value.capacity ();
    b[n].size = &i._errorString_size;
    b[n].is_null = &i._errorString_null;
    n++;
  }

  void access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // _sec
    //
    {
      unsigned int const& v =
        o._sec;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._sec_value, is_null, v);
      i._sec_null = is_null;
    }

    // _msec
    //
    {
      unsigned int const& v =
        o._msec;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._msec_value, is_null, v);
      i._msec_null = is_null;
    }

    // _curstatus
    //
    {
      unsigned int const& v =
        o._curstatus;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._curstatus_value, is_null, v);
      i._curstatus_null = is_null;
    }

    // _lastStatus
    //
    {
      unsigned int const& v =
        o._lastStatus;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._lastStatus_value, is_null, v);
      i._lastStatus_null = is_null;
    }

    // _warning
    //
    {
      long long unsigned int const& v =
        o._warning;

      bool is_null (false);
      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_image (
        i._warning_value, is_null, v);
      i._warning_null = is_null;
    }

    // _error
    //
    {
      long long unsigned int const& v =
        o._error;

      bool is_null (false);
      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_image (
        i._error_value, is_null, v);
      i._error_null = is_null;
    }

    // _errorString
    //
    {
      ::std::string const& v =
        o._errorString;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i._errorString_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i._errorString_value,
        size,
        is_null,
        v);
      i._errorString_null = is_null;
      i._errorString_size = size;
      grew = grew || (cap != i._errorString_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // _id
    //
    {
      long long unsigned int& v =
        o._id;

      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i._id_value,
        i._id_null);
    }

    // _sec
    //
    {
      unsigned int& v =
        o._sec;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._sec_value,
        i._sec_null);
    }

    // _msec
    //
    {
      unsigned int& v =
        o._msec;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._msec_value,
        i._msec_null);
    }

    // _curstatus
    //
    {
      unsigned int& v =
        o._curstatus;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._curstatus_value,
        i._curstatus_null);
    }

    // _lastStatus
    //
    {
      unsigned int& v =
        o._lastStatus;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._lastStatus_value,
        i._lastStatus_null);
    }

    // _warning
    //
    {
      long long unsigned int& v =
        o._warning;

      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i._warning_value,
        i._warning_null);
    }

    // _error
    //
    {
      long long unsigned int& v =
        o._error;

      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i._error_value,
        i._error_null);
    }

    // _errorString
    //
    {
      ::std::string& v =
        o._errorString;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i._errorString_value,
        i._errorString_size,
        i._errorString_null);
    }
  }

  void access::object_traits_impl< ::atccspublicstatus, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }
}

#include <odb/post.hxx>
