// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "atccsfilterstatus-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // atccsfilterstatus
  //

  bool access::object_traits_impl< ::atccsfilterstatus, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // atccspublicstatus base
    //
    if (object_traits_impl< ::atccspublicstatus, id_pgsql >::grow (
          i, t + 0UL))
      grew = true;

    // _filterPosition
    //
    t[8UL] = 0;

    // _targetFilterPosition
    //
    t[9UL] = 0;

    // _isHomed
    //
    t[10UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::atccsfilterstatus, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // atccspublicstatus base
    //
    object_traits_impl< ::atccspublicstatus, id_pgsql >::bind (b + n, i, sk);
    n += sk == statement_select ? 8UL : 7UL;

    // _filterPosition
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._filterPosition_value;
    b[n].is_null = &i._filterPosition_null;
    n++;

    // _targetFilterPosition
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._targetFilterPosition_value;
    b[n].is_null = &i._targetFilterPosition_null;
    n++;

    // _isHomed
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isHomed_value;
    b[n].is_null = &i._isHomed_null;
    n++;
  }

  bool access::object_traits_impl< ::atccsfilterstatus, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // atccspublicstatus base
    //
    if (object_traits_impl< ::atccspublicstatus, id_pgsql >::init (i, o, sk))
      grew = true;

    // _filterPosition
    //
    {
      short unsigned int const& v =
        o._filterPosition;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._filterPosition_value, is_null, v);
      i._filterPosition_null = is_null;
    }

    // _targetFilterPosition
    //
    {
      short unsigned int const& v =
        o._targetFilterPosition;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._targetFilterPosition_value, is_null, v);
      i._targetFilterPosition_null = is_null;
    }

    // _isHomed
    //
    {
      short unsigned int const& v =
        o._isHomed;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isHomed_value, is_null, v);
      i._isHomed_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::atccsfilterstatus, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // atccspublicstatus base
    //
    object_traits_impl< ::atccspublicstatus, id_pgsql >::init (o, i, db);

    // _filterPosition
    //
    {
      short unsigned int& v =
        o._filterPosition;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._filterPosition_value,
        i._filterPosition_null);
    }

    // _targetFilterPosition
    //
    {
      short unsigned int& v =
        o._targetFilterPosition;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._targetFilterPosition_value,
        i._targetFilterPosition_null);
    }

    // _isHomed
    //
    {
      short unsigned int& v =
        o._isHomed;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isHomed_value,
        i._isHomed_null);
    }
  }
}

#include <odb/post.hxx>
