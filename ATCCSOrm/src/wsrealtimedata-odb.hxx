// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef WSREALTIMEDATA_ODB_HXX
#define WSREALTIMEDATA_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "wsrealtimedata.h"

#include "emerealtimedata-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // wsrealtimedata
  //
  template <>
  struct class_traits< ::wsrealtimedata >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::wsrealtimedata >
  {
    public:
    typedef ::wsrealtimedata object_type;
    typedef ::wsrealtimedata* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::emerealtimedata >::id_type id_type;

    static const bool auto_id = object_traits< ::emerealtimedata >::auto_id;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // wsrealtimedata
  //
  template <typename A>
  struct query_columns< ::wsrealtimedata, id_pgsql, A >:
    query_columns< ::emerealtimedata, id_pgsql, A >
  {
    // emerealtimedata
    //
    typedef query_columns< ::emerealtimedata, id_pgsql, A > emerealtimedata;

    // temperature
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature_type_;

    static const temperature_type_ temperature;

    // humidity
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    humidity_type_;

    static const humidity_type_ humidity;

    // dewpoint
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    dewpoint_type_;

    static const dewpoint_type_ dewpoint;

    // pressure
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    pressure_type_;

    static const pressure_type_ pressure;

    // windspeed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    windspeed_type_;

    static const windspeed_type_ windspeed;

    // windspeed2
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    windspeed2_type_;

    static const windspeed2_type_ windspeed2;

    // windspeed10
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    windspeed10_type_;

    static const windspeed10_type_ windspeed10;

    // winddirection
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    winddirection_type_;

    static const winddirection_type_ winddirection;

    // rainfall
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    rainfall_type_;

    static const rainfall_type_ rainfall;

    // radiation
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    radiation_type_;

    static const radiation_type_ radiation;

    // illumination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    illumination_type_;

    static const illumination_type_ illumination;
  };

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::temperature_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  temperature (A::table_name, "\"temperature\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::humidity_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  humidity (A::table_name, "\"humidity\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::dewpoint_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  dewpoint (A::table_name, "\"dewpoint\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::pressure_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  pressure (A::table_name, "\"pressure\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::windspeed_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  windspeed (A::table_name, "\"windspeed\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::windspeed2_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  windspeed2 (A::table_name, "\"windspeed2\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::windspeed10_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  windspeed10 (A::table_name, "\"windspeed10\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::winddirection_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  winddirection (A::table_name, "\"winddirection\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::rainfall_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  rainfall (A::table_name, "\"rainfall\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::radiation_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  radiation (A::table_name, "\"radiation\"", 0);

  template <typename A>
  const typename query_columns< ::wsrealtimedata, id_pgsql, A >::illumination_type_
  query_columns< ::wsrealtimedata, id_pgsql, A >::
  illumination (A::table_name, "\"illumination\"", 0);

  template <typename A>
  struct pointer_query_columns< ::wsrealtimedata, id_pgsql, A >:
    query_columns< ::wsrealtimedata, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::wsrealtimedata, id_pgsql >:
    public access::object_traits< ::wsrealtimedata >
  {
    public:
    typedef object_traits_impl< ::emerealtimedata, id_pgsql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::emerealtimedata, id_pgsql >::image_type
    {
      // _temperature
      //
      double _temperature_value;
      bool _temperature_null;

      // _humidity
      //
      double _humidity_value;
      bool _humidity_null;

      // _dewpoint
      //
      double _dewpoint_value;
      bool _dewpoint_null;

      // _pressure
      //
      double _pressure_value;
      bool _pressure_null;

      // _windspeed
      //
      double _windspeed_value;
      bool _windspeed_null;

      // _windspeed2
      //
      double _windspeed2_value;
      bool _windspeed2_null;

      // _windspeed10
      //
      double _windspeed10_value;
      bool _windspeed10_null;

      // _winddirection
      //
      int _winddirection_value;
      bool _winddirection_null;

      // _rainfall
      //
      double _rainfall_value;
      bool _rainfall_null;

      // _radiation
      //
      double _radiation_value;
      bool _radiation_null;

      // _illumination
      //
      double _illumination_value;
      bool _illumination_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 14UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::wsrealtimedata, id_common >:
    public access::object_traits_impl< ::wsrealtimedata, id_pgsql >
  {
  };

  // wsrealtimedata
  //
}

#include "wsrealtimedata-odb.ixx"

#include <odb/post.hxx>

#endif // WSREALTIMEDATA_ODB_HXX
