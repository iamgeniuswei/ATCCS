// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "atccsccdstatus-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // atccsccdstatus
  //

  bool access::object_traits_impl< ::atccsccdstatus, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // atccspublicstatus base
    //
    if (object_traits_impl< ::atccspublicstatus, id_pgsql >::grow (
          i, t + 0UL))
      grew = true;

    // _observeName
    //
    if (t[8UL])
    {
      i._observeName_value.capacity (i._observeName_size);
      grew = true;
    }

    // _band
    //
    if (t[9UL])
    {
      i._band_value.capacity (i._band_size);
      grew = true;
    }

    // _lastTargetName
    //
    if (t[10UL])
    {
      i._lastTargetName_value.capacity (i._lastTargetName_size);
      grew = true;
    }

    // _observeType
    //
    t[11UL] = 0;

    // _epoch
    //
    t[12UL] = 0;

    // _indexOfRSMode
    //
    t[13UL] = 0;

    // _indexOfTSMode
    //
    t[14UL] = 0;

    // _indexOfGainMode
    //
    t[15UL] = 0;

    // _indexOfGain
    //
    t[16UL] = 0;

    // _readMode
    //
    t[17UL] = 0;

    // _exposureTriggerMode
    //
    t[18UL] = 0;

    // _fanOn
    //
    t[19UL] = 0;

    // _shutterMode
    //
    t[20UL] = 0;

    // _isFullFrame
    //
    t[21UL] = 0;

    // _isEM
    //
    t[22UL] = 0;

    // _isNoiseFilter
    //
    t[23UL] = 0;

    // _isBaseline
    //
    t[24UL] = 0;

    // _binX
    //
    t[25UL] = 0;

    // _binY
    //
    t[26UL] = 0;

    // _startX
    //
    t[27UL] = 0;

    // _startY
    //
    t[28UL] = 0;

    // _imageWidth
    //
    t[29UL] = 0;

    // _imageHeight
    //
    t[30UL] = 0;

    // _frameSequence
    //
    t[31UL] = 0;

    // _frameTotal
    //
    t[32UL] = 0;

    // _lastExposureTime
    //
    t[33UL] = 0;

    // _EM
    //
    t[34UL] = 0;

    // _baseline
    //
    t[35UL] = 0;

    // _J2000RightAscension
    //
    t[36UL] = 0;

    // _J2000Declination
    //
    t[37UL] = 0;

    // _exposureTime
    //
    t[38UL] = 0;

    // _delayTime
    //
    t[39UL] = 0;

    // _coolerT
    //
    t[40UL] = 0;

    // _targetCoolerT
    //
    t[41UL] = 0;

    // _lastExposureDuration
    //
    t[42UL] = 0;

    // _bitsOfPixel
    //
    t[43UL] = 0;

    // _exposurePercent
    //
    t[44UL] = 0;

    // _pixelScaleX
    //
    t[45UL] = 0;

    // _pixelScaleY
    //
    t[46UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::atccsccdstatus, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // atccspublicstatus base
    //
    object_traits_impl< ::atccspublicstatus, id_pgsql >::bind (b + n, i, sk);
    n += sk == statement_select ? 8UL : 7UL;

    // _observeName
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._observeName_value.data ();
    b[n].capacity = i._observeName_value.capacity ();
    b[n].size = &i._observeName_size;
    b[n].is_null = &i._observeName_null;
    n++;

    // _band
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._band_value.data ();
    b[n].capacity = i._band_value.capacity ();
    b[n].size = &i._band_size;
    b[n].is_null = &i._band_null;
    n++;

    // _lastTargetName
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._lastTargetName_value.data ();
    b[n].capacity = i._lastTargetName_value.capacity ();
    b[n].size = &i._lastTargetName_size;
    b[n].is_null = &i._lastTargetName_null;
    n++;

    // _observeType
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._observeType_value;
    b[n].is_null = &i._observeType_null;
    n++;

    // _epoch
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._epoch_value;
    b[n].is_null = &i._epoch_null;
    n++;

    // _indexOfRSMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfRSMode_value;
    b[n].is_null = &i._indexOfRSMode_null;
    n++;

    // _indexOfTSMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfTSMode_value;
    b[n].is_null = &i._indexOfTSMode_null;
    n++;

    // _indexOfGainMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfGainMode_value;
    b[n].is_null = &i._indexOfGainMode_null;
    n++;

    // _indexOfGain
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfGain_value;
    b[n].is_null = &i._indexOfGain_null;
    n++;

    // _readMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._readMode_value;
    b[n].is_null = &i._readMode_null;
    n++;

    // _exposureTriggerMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._exposureTriggerMode_value;
    b[n].is_null = &i._exposureTriggerMode_null;
    n++;

    // _fanOn
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._fanOn_value;
    b[n].is_null = &i._fanOn_null;
    n++;

    // _shutterMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._shutterMode_value;
    b[n].is_null = &i._shutterMode_null;
    n++;

    // _isFullFrame
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isFullFrame_value;
    b[n].is_null = &i._isFullFrame_null;
    n++;

    // _isEM
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isEM_value;
    b[n].is_null = &i._isEM_null;
    n++;

    // _isNoiseFilter
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isNoiseFilter_value;
    b[n].is_null = &i._isNoiseFilter_null;
    n++;

    // _isBaseline
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isBaseline_value;
    b[n].is_null = &i._isBaseline_null;
    n++;

    // _binX
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._binX_value;
    b[n].is_null = &i._binX_null;
    n++;

    // _binY
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._binY_value;
    b[n].is_null = &i._binY_null;
    n++;

    // _startX
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._startX_value;
    b[n].is_null = &i._startX_null;
    n++;

    // _startY
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._startY_value;
    b[n].is_null = &i._startY_null;
    n++;

    // _imageWidth
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._imageWidth_value;
    b[n].is_null = &i._imageWidth_null;
    n++;

    // _imageHeight
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._imageHeight_value;
    b[n].is_null = &i._imageHeight_null;
    n++;

    // _frameSequence
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._frameSequence_value;
    b[n].is_null = &i._frameSequence_null;
    n++;

    // _frameTotal
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._frameTotal_value;
    b[n].is_null = &i._frameTotal_null;
    n++;

    // _lastExposureTime
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._lastExposureTime_value;
    b[n].is_null = &i._lastExposureTime_null;
    n++;

    // _EM
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._EM_value;
    b[n].is_null = &i._EM_null;
    n++;

    // _baseline
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._baseline_value;
    b[n].is_null = &i._baseline_null;
    n++;

    // _J2000RightAscension
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._J2000RightAscension_value;
    b[n].is_null = &i._J2000RightAscension_null;
    n++;

    // _J2000Declination
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._J2000Declination_value;
    b[n].is_null = &i._J2000Declination_null;
    n++;

    // _exposureTime
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._exposureTime_value;
    b[n].is_null = &i._exposureTime_null;
    n++;

    // _delayTime
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._delayTime_value;
    b[n].is_null = &i._delayTime_null;
    n++;

    // _coolerT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._coolerT_value;
    b[n].is_null = &i._coolerT_null;
    n++;

    // _targetCoolerT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._targetCoolerT_value;
    b[n].is_null = &i._targetCoolerT_null;
    n++;

    // _lastExposureDuration
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._lastExposureDuration_value;
    b[n].is_null = &i._lastExposureDuration_null;
    n++;

    // _bitsOfPixel
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._bitsOfPixel_value;
    b[n].is_null = &i._bitsOfPixel_null;
    n++;

    // _exposurePercent
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._exposurePercent_value;
    b[n].is_null = &i._exposurePercent_null;
    n++;

    // _pixelScaleX
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._pixelScaleX_value;
    b[n].is_null = &i._pixelScaleX_null;
    n++;

    // _pixelScaleY
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._pixelScaleY_value;
    b[n].is_null = &i._pixelScaleY_null;
    n++;
  }

  bool access::object_traits_impl< ::atccsccdstatus, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // atccspublicstatus base
    //
    if (object_traits_impl< ::atccspublicstatus, id_pgsql >::init (i, o, sk))
      grew = true;

    // _observeName
    //
    {
      ::std::string const& v =
        o._observeName;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i._observeName_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i._observeName_value,
        size,
        is_null,
        v);
      i._observeName_null = is_null;
      i._observeName_size = size;
      grew = grew || (cap != i._observeName_value.capacity ());
    }

    // _band
    //
    {
      ::std::string const& v =
        o._band;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i._band_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i._band_value,
        size,
        is_null,
        v);
      i._band_null = is_null;
      i._band_size = size;
      grew = grew || (cap != i._band_value.capacity ());
    }

    // _lastTargetName
    //
    {
      ::std::string const& v =
        o._lastTargetName;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i._lastTargetName_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i._lastTargetName_value,
        size,
        is_null,
        v);
      i._lastTargetName_null = is_null;
      i._lastTargetName_size = size;
      grew = grew || (cap != i._lastTargetName_value.capacity ());
    }

    // _observeType
    //
    {
      short unsigned int const& v =
        o._observeType;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._observeType_value, is_null, v);
      i._observeType_null = is_null;
    }

    // _epoch
    //
    {
      short unsigned int const& v =
        o._epoch;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._epoch_value, is_null, v);
      i._epoch_null = is_null;
    }

    // _indexOfRSMode
    //
    {
      short unsigned int const& v =
        o._indexOfRSMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfRSMode_value, is_null, v);
      i._indexOfRSMode_null = is_null;
    }

    // _indexOfTSMode
    //
    {
      short unsigned int const& v =
        o._indexOfTSMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfTSMode_value, is_null, v);
      i._indexOfTSMode_null = is_null;
    }

    // _indexOfGainMode
    //
    {
      short unsigned int const& v =
        o._indexOfGainMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfGainMode_value, is_null, v);
      i._indexOfGainMode_null = is_null;
    }

    // _indexOfGain
    //
    {
      short unsigned int const& v =
        o._indexOfGain;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfGain_value, is_null, v);
      i._indexOfGain_null = is_null;
    }

    // _readMode
    //
    {
      short unsigned int const& v =
        o._readMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._readMode_value, is_null, v);
      i._readMode_null = is_null;
    }

    // _exposureTriggerMode
    //
    {
      short unsigned int const& v =
        o._exposureTriggerMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._exposureTriggerMode_value, is_null, v);
      i._exposureTriggerMode_null = is_null;
    }

    // _fanOn
    //
    {
      short unsigned int const& v =
        o._fanOn;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._fanOn_value, is_null, v);
      i._fanOn_null = is_null;
    }

    // _shutterMode
    //
    {
      short unsigned int const& v =
        o._shutterMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._shutterMode_value, is_null, v);
      i._shutterMode_null = is_null;
    }

    // _isFullFrame
    //
    {
      short unsigned int const& v =
        o._isFullFrame;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isFullFrame_value, is_null, v);
      i._isFullFrame_null = is_null;
    }

    // _isEM
    //
    {
      short unsigned int const& v =
        o._isEM;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isEM_value, is_null, v);
      i._isEM_null = is_null;
    }

    // _isNoiseFilter
    //
    {
      short unsigned int const& v =
        o._isNoiseFilter;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isNoiseFilter_value, is_null, v);
      i._isNoiseFilter_null = is_null;
    }

    // _isBaseline
    //
    {
      short unsigned int const& v =
        o._isBaseline;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isBaseline_value, is_null, v);
      i._isBaseline_null = is_null;
    }

    // _binX
    //
    {
      unsigned int const& v =
        o._binX;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._binX_value, is_null, v);
      i._binX_null = is_null;
    }

    // _binY
    //
    {
      unsigned int const& v =
        o._binY;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._binY_value, is_null, v);
      i._binY_null = is_null;
    }

    // _startX
    //
    {
      unsigned int const& v =
        o._startX;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._startX_value, is_null, v);
      i._startX_null = is_null;
    }

    // _startY
    //
    {
      unsigned int const& v =
        o._startY;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._startY_value, is_null, v);
      i._startY_null = is_null;
    }

    // _imageWidth
    //
    {
      unsigned int const& v =
        o._imageWidth;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._imageWidth_value, is_null, v);
      i._imageWidth_null = is_null;
    }

    // _imageHeight
    //
    {
      unsigned int const& v =
        o._imageHeight;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._imageHeight_value, is_null, v);
      i._imageHeight_null = is_null;
    }

    // _frameSequence
    //
    {
      unsigned int const& v =
        o._frameSequence;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._frameSequence_value, is_null, v);
      i._frameSequence_null = is_null;
    }

    // _frameTotal
    //
    {
      unsigned int const& v =
        o._frameTotal;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._frameTotal_value, is_null, v);
      i._frameTotal_null = is_null;
    }

    // _lastExposureTime
    //
    {
      unsigned int const& v =
        o._lastExposureTime;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._lastExposureTime_value, is_null, v);
      i._lastExposureTime_null = is_null;
    }

    // _EM
    //
    {
      unsigned int const& v =
        o._EM;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._EM_value, is_null, v);
      i._EM_null = is_null;
    }

    // _baseline
    //
    {
      unsigned int const& v =
        o._baseline;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._baseline_value, is_null, v);
      i._baseline_null = is_null;
    }

    // _J2000RightAscension
    //
    {
      double const& v =
        o._J2000RightAscension;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._J2000RightAscension_value, is_null, v);
      i._J2000RightAscension_null = is_null;
    }

    // _J2000Declination
    //
    {
      double const& v =
        o._J2000Declination;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._J2000Declination_value, is_null, v);
      i._J2000Declination_null = is_null;
    }

    // _exposureTime
    //
    {
      double const& v =
        o._exposureTime;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._exposureTime_value, is_null, v);
      i._exposureTime_null = is_null;
    }

    // _delayTime
    //
    {
      double const& v =
        o._delayTime;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._delayTime_value, is_null, v);
      i._delayTime_null = is_null;
    }

    // _coolerT
    //
    {
      double const& v =
        o._coolerT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._coolerT_value, is_null, v);
      i._coolerT_null = is_null;
    }

    // _targetCoolerT
    //
    {
      double const& v =
        o._targetCoolerT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._targetCoolerT_value, is_null, v);
      i._targetCoolerT_null = is_null;
    }

    // _lastExposureDuration
    //
    {
      double const& v =
        o._lastExposureDuration;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._lastExposureDuration_value, is_null, v);
      i._lastExposureDuration_null = is_null;
    }

    // _bitsOfPixel
    //
    {
      double const& v =
        o._bitsOfPixel;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._bitsOfPixel_value, is_null, v);
      i._bitsOfPixel_null = is_null;
    }

    // _exposurePercent
    //
    {
      double const& v =
        o._exposurePercent;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._exposurePercent_value, is_null, v);
      i._exposurePercent_null = is_null;
    }

    // _pixelScaleX
    //
    {
      double const& v =
        o._pixelScaleX;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._pixelScaleX_value, is_null, v);
      i._pixelScaleX_null = is_null;
    }

    // _pixelScaleY
    //
    {
      double const& v =
        o._pixelScaleY;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._pixelScaleY_value, is_null, v);
      i._pixelScaleY_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::atccsccdstatus, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // atccspublicstatus base
    //
    object_traits_impl< ::atccspublicstatus, id_pgsql >::init (o, i, db);

    // _observeName
    //
    {
      ::std::string& v =
        o._observeName;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i._observeName_value,
        i._observeName_size,
        i._observeName_null);
    }

    // _band
    //
    {
      ::std::string& v =
        o._band;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i._band_value,
        i._band_size,
        i._band_null);
    }

    // _lastTargetName
    //
    {
      ::std::string& v =
        o._lastTargetName;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i._lastTargetName_value,
        i._lastTargetName_size,
        i._lastTargetName_null);
    }

    // _observeType
    //
    {
      short unsigned int& v =
        o._observeType;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._observeType_value,
        i._observeType_null);
    }

    // _epoch
    //
    {
      short unsigned int& v =
        o._epoch;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._epoch_value,
        i._epoch_null);
    }

    // _indexOfRSMode
    //
    {
      short unsigned int& v =
        o._indexOfRSMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfRSMode_value,
        i._indexOfRSMode_null);
    }

    // _indexOfTSMode
    //
    {
      short unsigned int& v =
        o._indexOfTSMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfTSMode_value,
        i._indexOfTSMode_null);
    }

    // _indexOfGainMode
    //
    {
      short unsigned int& v =
        o._indexOfGainMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfGainMode_value,
        i._indexOfGainMode_null);
    }

    // _indexOfGain
    //
    {
      short unsigned int& v =
        o._indexOfGain;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfGain_value,
        i._indexOfGain_null);
    }

    // _readMode
    //
    {
      short unsigned int& v =
        o._readMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._readMode_value,
        i._readMode_null);
    }

    // _exposureTriggerMode
    //
    {
      short unsigned int& v =
        o._exposureTriggerMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._exposureTriggerMode_value,
        i._exposureTriggerMode_null);
    }

    // _fanOn
    //
    {
      short unsigned int& v =
        o._fanOn;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._fanOn_value,
        i._fanOn_null);
    }

    // _shutterMode
    //
    {
      short unsigned int& v =
        o._shutterMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._shutterMode_value,
        i._shutterMode_null);
    }

    // _isFullFrame
    //
    {
      short unsigned int& v =
        o._isFullFrame;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isFullFrame_value,
        i._isFullFrame_null);
    }

    // _isEM
    //
    {
      short unsigned int& v =
        o._isEM;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isEM_value,
        i._isEM_null);
    }

    // _isNoiseFilter
    //
    {
      short unsigned int& v =
        o._isNoiseFilter;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isNoiseFilter_value,
        i._isNoiseFilter_null);
    }

    // _isBaseline
    //
    {
      short unsigned int& v =
        o._isBaseline;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isBaseline_value,
        i._isBaseline_null);
    }

    // _binX
    //
    {
      unsigned int& v =
        o._binX;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._binX_value,
        i._binX_null);
    }

    // _binY
    //
    {
      unsigned int& v =
        o._binY;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._binY_value,
        i._binY_null);
    }

    // _startX
    //
    {
      unsigned int& v =
        o._startX;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._startX_value,
        i._startX_null);
    }

    // _startY
    //
    {
      unsigned int& v =
        o._startY;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._startY_value,
        i._startY_null);
    }

    // _imageWidth
    //
    {
      unsigned int& v =
        o._imageWidth;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._imageWidth_value,
        i._imageWidth_null);
    }

    // _imageHeight
    //
    {
      unsigned int& v =
        o._imageHeight;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._imageHeight_value,
        i._imageHeight_null);
    }

    // _frameSequence
    //
    {
      unsigned int& v =
        o._frameSequence;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._frameSequence_value,
        i._frameSequence_null);
    }

    // _frameTotal
    //
    {
      unsigned int& v =
        o._frameTotal;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._frameTotal_value,
        i._frameTotal_null);
    }

    // _lastExposureTime
    //
    {
      unsigned int& v =
        o._lastExposureTime;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._lastExposureTime_value,
        i._lastExposureTime_null);
    }

    // _EM
    //
    {
      unsigned int& v =
        o._EM;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._EM_value,
        i._EM_null);
    }

    // _baseline
    //
    {
      unsigned int& v =
        o._baseline;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._baseline_value,
        i._baseline_null);
    }

    // _J2000RightAscension
    //
    {
      double& v =
        o._J2000RightAscension;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._J2000RightAscension_value,
        i._J2000RightAscension_null);
    }

    // _J2000Declination
    //
    {
      double& v =
        o._J2000Declination;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._J2000Declination_value,
        i._J2000Declination_null);
    }

    // _exposureTime
    //
    {
      double& v =
        o._exposureTime;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._exposureTime_value,
        i._exposureTime_null);
    }

    // _delayTime
    //
    {
      double& v =
        o._delayTime;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._delayTime_value,
        i._delayTime_null);
    }

    // _coolerT
    //
    {
      double& v =
        o._coolerT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._coolerT_value,
        i._coolerT_null);
    }

    // _targetCoolerT
    //
    {
      double& v =
        o._targetCoolerT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._targetCoolerT_value,
        i._targetCoolerT_null);
    }

    // _lastExposureDuration
    //
    {
      double& v =
        o._lastExposureDuration;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._lastExposureDuration_value,
        i._lastExposureDuration_null);
    }

    // _bitsOfPixel
    //
    {
      double& v =
        o._bitsOfPixel;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._bitsOfPixel_value,
        i._bitsOfPixel_null);
    }

    // _exposurePercent
    //
    {
      double& v =
        o._exposurePercent;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._exposurePercent_value,
        i._exposurePercent_null);
    }

    // _pixelScaleX
    //
    {
      double& v =
        o._pixelScaleX;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._pixelScaleX_value,
        i._pixelScaleX_null);
    }

    // _pixelScaleY
    //
    {
      double& v =
        o._pixelScaleY;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._pixelScaleY_value,
        i._pixelScaleY_null);
    }
  }
}

#include <odb/post.hxx>
