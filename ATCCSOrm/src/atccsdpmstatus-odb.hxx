// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ATCCSDPMSTATUS_ODB_HXX
#define ATCCSDPMSTATUS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "atccsdpmstatus.h"

#include "atccspublicstatus-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // atccsdpmstatus
  //
  template <>
  struct class_traits< ::atccsdpmstatus >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::atccsdpmstatus >
  {
    public:
    typedef ::atccsdpmstatus object_type;
    typedef ::atccsdpmstatus* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::atccspublicstatus >::id_type id_type;

    static const bool auto_id = object_traits< ::atccspublicstatus >::auto_id;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // atccsdpmstatus
  //
  template <typename A>
  struct query_columns< ::atccsdpmstatus, id_pgsql, A >:
    query_columns< ::atccspublicstatus, id_pgsql, A >
  {
    // atccspublicstatus
    //
    typedef query_columns< ::atccspublicstatus, id_pgsql, A > atccspublicstatus;

    // imagePath
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    imagePath_type_;

    static const imagePath_type_ imagePath;

    // objectName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    objectName_type_;

    static const objectName_type_ objectName;

    // objectType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    objectType_type_;

    static const objectType_type_ objectType;

    // rightAscension
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    rightAscension_type_;

    static const rightAscension_type_ rightAscension;

    // declination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    declination_type_;

    static const declination_type_ declination;

    // epoch
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    epoch_type_;

    static const epoch_type_ epoch;

    // band
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    band_type_;

    static const band_type_ band;

    // observeStatus
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    observeStatus_type_;

    static const observeStatus_type_ observeStatus;

    // binX
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    binX_type_;

    static const binX_type_ binX;

    // binY
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    binY_type_;

    static const binY_type_ binY;

    // startX
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    startX_type_;

    static const startX_type_ startX;

    // startY
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    startY_type_;

    static const startY_type_ startY;

    // imageWidth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    imageWidth_type_;

    static const imageWidth_type_ imageWidth;

    // imageHeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    imageHeight_type_;

    static const imageHeight_type_ imageHeight;

    // exposureTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    exposureTime_type_;

    static const exposureTime_type_ exposureTime;

    // indexOfGainMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfGainMode_type_;

    static const indexOfGainMode_type_ indexOfGainMode;

    // indexOfRSMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfRSMode_type_;

    static const indexOfRSMode_type_ indexOfRSMode;

    // indexOfTSMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfTSMode_type_;

    static const indexOfTSMode_type_ indexOfTSMode;

    // indexOfGainGear
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfGainGear_type_;

    static const indexOfGainGear_type_ indexOfGainGear;

    // indexOfRMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfRMode_type_;

    static const indexOfRMode_type_ indexOfRMode;

    // gain
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    gain_type_;

    static const gain_type_ gain;

    // noise
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    noise_type_;

    static const noise_type_ noise;

    // coolerT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    coolerT_type_;

    static const coolerT_type_ coolerT;

    // targetCoolerT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetCoolerT_type_;

    static const targetCoolerT_type_ targetCoolerT;

    // bitsOfPixel
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    bitsOfPixel_type_;

    static const bitsOfPixel_type_ bitsOfPixel;

    // exposureTriggerMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    exposureTriggerMode_type_;

    static const exposureTriggerMode_type_ exposureTriggerMode;

    // indexOfCoolerMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfCoolerMode_type_;

    static const indexOfCoolerMode_type_ indexOfCoolerMode;

    // fanStatus
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    fanStatus_type_;

    static const fanStatus_type_ fanStatus;

    // imageMeanValue
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    imageMeanValue_type_;

    static const imageMeanValue_type_ imageMeanValue;

    // imageRMS
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    imageRMS_type_;

    static const imageRMS_type_ imageRMS;

    // astrologyHHFW
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    astrologyHHFW_type_;

    static const astrologyHHFW_type_ astrologyHHFW;

    // imageCenterRightAscension
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    imageCenterRightAscension_type_;

    static const imageCenterRightAscension_type_ imageCenterRightAscension;

    // imageCenterDeclination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    imageCenterDeclination_type_;

    static const imageCenterDeclination_type_ imageCenterDeclination;

    // missX
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    missX_type_;

    static const missX_type_ missX;

    // missY
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    missY_type_;

    static const missY_type_ missY;

    // missAxis1
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    missAxis1_type_;

    static const missAxis1_type_ missAxis1;

    // missAxis2
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    missAxis2_type_;

    static const missAxis2_type_ missAxis2;

    // atmosphericTransparency
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    atmosphericTransparency_type_;

    static const atmosphericTransparency_type_ atmosphericTransparency;

    // shutterMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    shutterMode_type_;

    static const shutterMode_type_ shutterMode;

    // isFullFrame
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isFullFrame_type_;

    static const isFullFrame_type_ isFullFrame;

    // isEM
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isEM_type_;

    static const isEM_type_ isEM;

    // EM
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    EM_type_;

    static const EM_type_ EM;

    // isNoiseFilter
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isNoiseFilter_type_;

    static const isNoiseFilter_type_ isNoiseFilter;

    // isBaseline
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isBaseline_type_;

    static const isBaseline_type_ isBaseline;

    // isOverScan
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isOverScan_type_;

    static const isOverScan_type_ isOverScan;

    // pixelScaleX
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    pixelScaleX_type_;

    static const pixelScaleX_type_ pixelScaleX;

    // pixelScaleY
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    pixelScaleY_type_;

    static const pixelScaleY_type_ pixelScaleY;

    // temperature
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    temperature_type_;

    static const temperature_type_ temperature;

    // fitsHead
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    fitsHead_type_;

    static const fitsHead_type_ fitsHead;
  };

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::imagePath_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  imagePath (A::table_name, "\"imagePath\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::objectName_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  objectName (A::table_name, "\"objectName\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::objectType_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  objectType (A::table_name, "\"objectType\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::rightAscension_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  rightAscension (A::table_name, "\"rightAscension\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::declination_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  declination (A::table_name, "\"declination\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::epoch_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  epoch (A::table_name, "\"epoch\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::band_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  band (A::table_name, "\"band\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::observeStatus_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  observeStatus (A::table_name, "\"observeStatus\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::binX_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  binX (A::table_name, "\"binX\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::binY_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  binY (A::table_name, "\"binY\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::startX_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  startX (A::table_name, "\"startX\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::startY_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  startY (A::table_name, "\"startY\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::imageWidth_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  imageWidth (A::table_name, "\"imageWidth\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::imageHeight_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  imageHeight (A::table_name, "\"imageHeight\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::exposureTime_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  exposureTime (A::table_name, "\"exposureTime\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::indexOfGainMode_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  indexOfGainMode (A::table_name, "\"indexOfGainMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::indexOfRSMode_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  indexOfRSMode (A::table_name, "\"indexOfRSMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::indexOfTSMode_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  indexOfTSMode (A::table_name, "\"indexOfTSMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::indexOfGainGear_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  indexOfGainGear (A::table_name, "\"indexOfGainGear\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::indexOfRMode_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  indexOfRMode (A::table_name, "\"indexOfRMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::gain_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  gain (A::table_name, "\"gain\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::noise_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  noise (A::table_name, "\"noise\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::coolerT_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  coolerT (A::table_name, "\"coolerT\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::targetCoolerT_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  targetCoolerT (A::table_name, "\"targetCoolerT\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::bitsOfPixel_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  bitsOfPixel (A::table_name, "\"bitsOfPixel\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::exposureTriggerMode_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  exposureTriggerMode (A::table_name, "\"exposureTriggerMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::indexOfCoolerMode_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  indexOfCoolerMode (A::table_name, "\"indexOfCoolerMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::fanStatus_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  fanStatus (A::table_name, "\"fanStatus\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::imageMeanValue_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  imageMeanValue (A::table_name, "\"imageMeanValue\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::imageRMS_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  imageRMS (A::table_name, "\"imageRMS\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::astrologyHHFW_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  astrologyHHFW (A::table_name, "\"astrologyHHFW\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::imageCenterRightAscension_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  imageCenterRightAscension (A::table_name, "\"imageCenterRightAscension\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::imageCenterDeclination_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  imageCenterDeclination (A::table_name, "\"imageCenterDeclination\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::missX_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  missX (A::table_name, "\"missX\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::missY_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  missY (A::table_name, "\"missY\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::missAxis1_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  missAxis1 (A::table_name, "\"missAxis1\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::missAxis2_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  missAxis2 (A::table_name, "\"missAxis2\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::atmosphericTransparency_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  atmosphericTransparency (A::table_name, "\"atmosphericTransparency\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::shutterMode_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  shutterMode (A::table_name, "\"shutterMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::isFullFrame_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  isFullFrame (A::table_name, "\"isFullFrame\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::isEM_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  isEM (A::table_name, "\"isEM\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::EM_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  EM (A::table_name, "\"EM\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::isNoiseFilter_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  isNoiseFilter (A::table_name, "\"isNoiseFilter\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::isBaseline_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  isBaseline (A::table_name, "\"isBaseline\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::isOverScan_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  isOverScan (A::table_name, "\"isOverScan\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::pixelScaleX_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  pixelScaleX (A::table_name, "\"pixelScaleX\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::pixelScaleY_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  pixelScaleY (A::table_name, "\"pixelScaleY\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::temperature_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  temperature (A::table_name, "\"temperature\"", 0);

  template <typename A>
  const typename query_columns< ::atccsdpmstatus, id_pgsql, A >::fitsHead_type_
  query_columns< ::atccsdpmstatus, id_pgsql, A >::
  fitsHead (A::table_name, "\"fitsHead\"", 0);

  template <typename A>
  struct pointer_query_columns< ::atccsdpmstatus, id_pgsql, A >:
    query_columns< ::atccsdpmstatus, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::atccsdpmstatus, id_pgsql >:
    public access::object_traits< ::atccsdpmstatus >
  {
    public:
    typedef object_traits_impl< ::atccspublicstatus, id_pgsql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::atccspublicstatus, id_pgsql >::image_type
    {
      // _imagePath
      //
      details::buffer _imagePath_value;
      std::size_t _imagePath_size;
      bool _imagePath_null;

      // _objectName
      //
      details::buffer _objectName_value;
      std::size_t _objectName_size;
      bool _objectName_null;

      // _objectType
      //
      short _objectType_value;
      bool _objectType_null;

      // _rightAscension
      //
      double _rightAscension_value;
      bool _rightAscension_null;

      // _declination
      //
      double _declination_value;
      bool _declination_null;

      // _epoch
      //
      short _epoch_value;
      bool _epoch_null;

      // _band
      //
      details::buffer _band_value;
      std::size_t _band_size;
      bool _band_null;

      // _observeStatus
      //
      short _observeStatus_value;
      bool _observeStatus_null;

      // _binX
      //
      int _binX_value;
      bool _binX_null;

      // _binY
      //
      int _binY_value;
      bool _binY_null;

      // _startX
      //
      int _startX_value;
      bool _startX_null;

      // _startY
      //
      int _startY_value;
      bool _startY_null;

      // _imageWidth
      //
      int _imageWidth_value;
      bool _imageWidth_null;

      // _imageHeight
      //
      int _imageHeight_value;
      bool _imageHeight_null;

      // _exposureTime
      //
      double _exposureTime_value;
      bool _exposureTime_null;

      // _indexOfGainMode
      //
      short _indexOfGainMode_value;
      bool _indexOfGainMode_null;

      // _indexOfRSMode
      //
      short _indexOfRSMode_value;
      bool _indexOfRSMode_null;

      // _indexOfTSMode
      //
      short _indexOfTSMode_value;
      bool _indexOfTSMode_null;

      // _indexOfGainGear
      //
      short _indexOfGainGear_value;
      bool _indexOfGainGear_null;

      // _indexOfRMode
      //
      short _indexOfRMode_value;
      bool _indexOfRMode_null;

      // _gain
      //
      short _gain_value;
      bool _gain_null;

      // _noise
      //
      double _noise_value;
      bool _noise_null;

      // _coolerT
      //
      double _coolerT_value;
      bool _coolerT_null;

      // _targetCoolerT
      //
      double _targetCoolerT_value;
      bool _targetCoolerT_null;

      // _bitsOfPixel
      //
      double _bitsOfPixel_value;
      bool _bitsOfPixel_null;

      // _exposureTriggerMode
      //
      short _exposureTriggerMode_value;
      bool _exposureTriggerMode_null;

      // _indexOfCoolerMode
      //
      short _indexOfCoolerMode_value;
      bool _indexOfCoolerMode_null;

      // _fanStatus
      //
      short _fanStatus_value;
      bool _fanStatus_null;

      // _imageMeanValue
      //
      double _imageMeanValue_value;
      bool _imageMeanValue_null;

      // _imageRMS
      //
      double _imageRMS_value;
      bool _imageRMS_null;

      // _astrologyHHFW
      //
      double _astrologyHHFW_value;
      bool _astrologyHHFW_null;

      // _imageCenterRightAscension
      //
      double _imageCenterRightAscension_value;
      bool _imageCenterRightAscension_null;

      // _imageCenterDeclination
      //
      double _imageCenterDeclination_value;
      bool _imageCenterDeclination_null;

      // _missX
      //
      double _missX_value;
      bool _missX_null;

      // _missY
      //
      double _missY_value;
      bool _missY_null;

      // _missAxis1
      //
      double _missAxis1_value;
      bool _missAxis1_null;

      // _missAxis2
      //
      double _missAxis2_value;
      bool _missAxis2_null;

      // _atmosphericTransparency
      //
      double _atmosphericTransparency_value;
      bool _atmosphericTransparency_null;

      // _shutterMode
      //
      short _shutterMode_value;
      bool _shutterMode_null;

      // _isFullFrame
      //
      short _isFullFrame_value;
      bool _isFullFrame_null;

      // _isEM
      //
      short _isEM_value;
      bool _isEM_null;

      // _EM
      //
      int _EM_value;
      bool _EM_null;

      // _isNoiseFilter
      //
      short _isNoiseFilter_value;
      bool _isNoiseFilter_null;

      // _isBaseline
      //
      short _isBaseline_value;
      bool _isBaseline_null;

      // _isOverScan
      //
      short _isOverScan_value;
      bool _isOverScan_null;

      // _pixelScaleX
      //
      double _pixelScaleX_value;
      bool _pixelScaleX_null;

      // _pixelScaleY
      //
      double _pixelScaleY_value;
      bool _pixelScaleY_null;

      // _temperature
      //
      double _temperature_value;
      bool _temperature_null;

      // _fitsHead
      //
      short _fitsHead_value;
      bool _fitsHead_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // atccsdpmstatus
  //
}

#include "atccsdpmstatus-odb.ixx"

#include <odb/post.hxx>

#endif // ATCCSDPMSTATUS_ODB_HXX
