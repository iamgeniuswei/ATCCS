// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ATCCSPUBLICSTATUS_ODB_HXX
#define ATCCSPUBLICSTATUS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "atccspublicstatus.h"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // atccspublicstatus
  //
  template <>
  struct class_traits< ::atccspublicstatus >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::atccspublicstatus >
  {
    public:
    typedef ::atccspublicstatus object_type;
    typedef ::atccspublicstatus* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // atccspublicstatus
  //
  template <typename A>
  struct query_columns< ::atccspublicstatus, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // sec
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    sec_type_;

    static const sec_type_ sec;

    // msec
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    msec_type_;

    static const msec_type_ msec;

    // curstatus
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    curstatus_type_;

    static const curstatus_type_ curstatus;

    // lastStatus
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    lastStatus_type_;

    static const lastStatus_type_ lastStatus;

    // warning
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    warning_type_;

    static const warning_type_ warning;

    // error
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    error_type_;

    static const error_type_ error;

    // errorString
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    errorString_type_;

    static const errorString_type_ errorString;
  };

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::id_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::sec_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  sec (A::table_name, "\"sec\"", 0);

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::msec_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  msec (A::table_name, "\"msec\"", 0);

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::curstatus_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  curstatus (A::table_name, "\"curstatus\"", 0);

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::lastStatus_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  lastStatus (A::table_name, "\"lastStatus\"", 0);

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::warning_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  warning (A::table_name, "\"warning\"", 0);

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::error_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  error (A::table_name, "\"error\"", 0);

  template <typename A>
  const typename query_columns< ::atccspublicstatus, id_pgsql, A >::errorString_type_
  query_columns< ::atccspublicstatus, id_pgsql, A >::
  errorString (A::table_name, "\"errorString\"", 0);

  template <typename A>
  struct pointer_query_columns< ::atccspublicstatus, id_pgsql, A >:
    query_columns< ::atccspublicstatus, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::atccspublicstatus, id_pgsql >:
    public access::object_traits< ::atccspublicstatus >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // _id
      //
      long long _id_value;
      bool _id_null;

      // _sec
      //
      int _sec_value;
      bool _sec_null;

      // _msec
      //
      int _msec_value;
      bool _msec_null;

      // _curstatus
      //
      int _curstatus_value;
      bool _curstatus_null;

      // _lastStatus
      //
      int _lastStatus_value;
      bool _lastStatus_null;

      // _warning
      //
      long long _warning_value;
      bool _warning_null;

      // _error
      //
      long long _error_value;
      bool _error_null;

      // _errorString
      //
      details::buffer _errorString_value;
      std::size_t _errorString_size;
      bool _errorString_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // atccspublicstatus
  //
}

#include "atccspublicstatus-odb.ixx"

#include <odb/post.hxx>

#endif // ATCCSPUBLICSTATUS_ODB_HXX
