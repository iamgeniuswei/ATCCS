// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ATCCSFILTERSTATUS_ODB_HXX
#define ATCCSFILTERSTATUS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "atccsfilterstatus.h"

#include "atccspublicstatus-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // atccsfilterstatus
  //
  template <>
  struct class_traits< ::atccsfilterstatus >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::atccsfilterstatus >
  {
    public:
    typedef ::atccsfilterstatus object_type;
    typedef ::atccsfilterstatus* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::atccspublicstatus >::id_type id_type;

    static const bool auto_id = object_traits< ::atccspublicstatus >::auto_id;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // atccsfilterstatus
  //
  template <typename A>
  struct query_columns< ::atccsfilterstatus, id_pgsql, A >:
    query_columns< ::atccspublicstatus, id_pgsql, A >
  {
    // atccspublicstatus
    //
    typedef query_columns< ::atccspublicstatus, id_pgsql, A > atccspublicstatus;

    // filterPosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    filterPosition_type_;

    static const filterPosition_type_ filterPosition;

    // targetFilterPosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    targetFilterPosition_type_;

    static const targetFilterPosition_type_ targetFilterPosition;

    // isHomed
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isHomed_type_;

    static const isHomed_type_ isHomed;
  };

  template <typename A>
  const typename query_columns< ::atccsfilterstatus, id_pgsql, A >::filterPosition_type_
  query_columns< ::atccsfilterstatus, id_pgsql, A >::
  filterPosition (A::table_name, "\"filterPosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsfilterstatus, id_pgsql, A >::targetFilterPosition_type_
  query_columns< ::atccsfilterstatus, id_pgsql, A >::
  targetFilterPosition (A::table_name, "\"targetFilterPosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsfilterstatus, id_pgsql, A >::isHomed_type_
  query_columns< ::atccsfilterstatus, id_pgsql, A >::
  isHomed (A::table_name, "\"isHomed\"", 0);

  template <typename A>
  struct pointer_query_columns< ::atccsfilterstatus, id_pgsql, A >:
    query_columns< ::atccsfilterstatus, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::atccsfilterstatus, id_pgsql >:
    public access::object_traits< ::atccsfilterstatus >
  {
    public:
    typedef object_traits_impl< ::atccspublicstatus, id_pgsql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::atccspublicstatus, id_pgsql >::image_type
    {
      // _filterPosition
      //
      short _filterPosition_value;
      bool _filterPosition_null;

      // _targetFilterPosition
      //
      short _targetFilterPosition_value;
      bool _targetFilterPosition_null;

      // _isHomed
      //
      short _isHomed_value;
      bool _isHomed_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // atccsfilterstatus
  //
}

#include "atccsfilterstatus-odb.ixx"

#include <odb/post.hxx>

#endif // ATCCSFILTERSTATUS_ODB_HXX
