// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ATCCSCCDSTATUS_ODB_HXX
#define ATCCSCCDSTATUS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "atccsccdstatus.h"

#include "atccspublicstatus-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // atccsccdstatus
  //
  template <>
  struct class_traits< ::atccsccdstatus >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::atccsccdstatus >
  {
    public:
    typedef ::atccsccdstatus object_type;
    typedef ::atccsccdstatus* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::atccspublicstatus >::id_type id_type;

    static const bool auto_id = object_traits< ::atccspublicstatus >::auto_id;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // atccsccdstatus
  //
  template <typename A>
  struct query_columns< ::atccsccdstatus, id_pgsql, A >:
    query_columns< ::atccspublicstatus, id_pgsql, A >
  {
    // atccspublicstatus
    //
    typedef query_columns< ::atccspublicstatus, id_pgsql, A > atccspublicstatus;

    // observeName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    observeName_type_;

    static const observeName_type_ observeName;

    // band
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    band_type_;

    static const band_type_ band;

    // lastTargetName
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    lastTargetName_type_;

    static const lastTargetName_type_ lastTargetName;

    // observeType
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    observeType_type_;

    static const observeType_type_ observeType;

    // epoch
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    epoch_type_;

    static const epoch_type_ epoch;

    // indexOfRSMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfRSMode_type_;

    static const indexOfRSMode_type_ indexOfRSMode;

    // indexOfTSMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfTSMode_type_;

    static const indexOfTSMode_type_ indexOfTSMode;

    // indexOfGainMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfGainMode_type_;

    static const indexOfGainMode_type_ indexOfGainMode;

    // indexOfGain
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    indexOfGain_type_;

    static const indexOfGain_type_ indexOfGain;

    // readMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    readMode_type_;

    static const readMode_type_ readMode;

    // exposureTriggerMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    exposureTriggerMode_type_;

    static const exposureTriggerMode_type_ exposureTriggerMode;

    // fanOn
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    fanOn_type_;

    static const fanOn_type_ fanOn;

    // shutterMode
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    shutterMode_type_;

    static const shutterMode_type_ shutterMode;

    // isFullFrame
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isFullFrame_type_;

    static const isFullFrame_type_ isFullFrame;

    // isEM
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isEM_type_;

    static const isEM_type_ isEM;

    // isNoiseFilter
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isNoiseFilter_type_;

    static const isNoiseFilter_type_ isNoiseFilter;

    // isBaseline
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    isBaseline_type_;

    static const isBaseline_type_ isBaseline;

    // binX
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    binX_type_;

    static const binX_type_ binX;

    // binY
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    binY_type_;

    static const binY_type_ binY;

    // startX
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    startX_type_;

    static const startX_type_ startX;

    // startY
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    startY_type_;

    static const startY_type_ startY;

    // imageWidth
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    imageWidth_type_;

    static const imageWidth_type_ imageWidth;

    // imageHeight
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    imageHeight_type_;

    static const imageHeight_type_ imageHeight;

    // frameSequence
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    frameSequence_type_;

    static const frameSequence_type_ frameSequence;

    // frameTotal
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    frameTotal_type_;

    static const frameTotal_type_ frameTotal;

    // lastExposureTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    lastExposureTime_type_;

    static const lastExposureTime_type_ lastExposureTime;

    // EM
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    EM_type_;

    static const EM_type_ EM;

    // baseline
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        unsigned int,
        pgsql::id_integer >::query_type,
      pgsql::id_integer >
    baseline_type_;

    static const baseline_type_ baseline;

    // J2000RightAscension
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    J2000RightAscension_type_;

    static const J2000RightAscension_type_ J2000RightAscension;

    // J2000Declination
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    J2000Declination_type_;

    static const J2000Declination_type_ J2000Declination;

    // exposureTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    exposureTime_type_;

    static const exposureTime_type_ exposureTime;

    // delayTime
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    delayTime_type_;

    static const delayTime_type_ delayTime;

    // coolerT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    coolerT_type_;

    static const coolerT_type_ coolerT;

    // targetCoolerT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetCoolerT_type_;

    static const targetCoolerT_type_ targetCoolerT;

    // lastExposureDuration
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    lastExposureDuration_type_;

    static const lastExposureDuration_type_ lastExposureDuration;

    // bitsOfPixel
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    bitsOfPixel_type_;

    static const bitsOfPixel_type_ bitsOfPixel;

    // exposurePercent
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    exposurePercent_type_;

    static const exposurePercent_type_ exposurePercent;

    // pixelScaleX
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    pixelScaleX_type_;

    static const pixelScaleX_type_ pixelScaleX;

    // pixelScaleY
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    pixelScaleY_type_;

    static const pixelScaleY_type_ pixelScaleY;
  };

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::observeName_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  observeName (A::table_name, "\"observeName\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::band_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  band (A::table_name, "\"band\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::lastTargetName_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  lastTargetName (A::table_name, "\"lastTargetName\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::observeType_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  observeType (A::table_name, "\"observeType\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::epoch_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  epoch (A::table_name, "\"epoch\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::indexOfRSMode_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  indexOfRSMode (A::table_name, "\"indexOfRSMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::indexOfTSMode_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  indexOfTSMode (A::table_name, "\"indexOfTSMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::indexOfGainMode_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  indexOfGainMode (A::table_name, "\"indexOfGainMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::indexOfGain_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  indexOfGain (A::table_name, "\"indexOfGain\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::readMode_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  readMode (A::table_name, "\"readMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::exposureTriggerMode_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  exposureTriggerMode (A::table_name, "\"exposureTriggerMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::fanOn_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  fanOn (A::table_name, "\"fanOn\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::shutterMode_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  shutterMode (A::table_name, "\"shutterMode\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::isFullFrame_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  isFullFrame (A::table_name, "\"isFullFrame\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::isEM_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  isEM (A::table_name, "\"isEM\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::isNoiseFilter_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  isNoiseFilter (A::table_name, "\"isNoiseFilter\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::isBaseline_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  isBaseline (A::table_name, "\"isBaseline\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::binX_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  binX (A::table_name, "\"binX\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::binY_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  binY (A::table_name, "\"binY\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::startX_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  startX (A::table_name, "\"startX\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::startY_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  startY (A::table_name, "\"startY\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::imageWidth_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  imageWidth (A::table_name, "\"imageWidth\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::imageHeight_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  imageHeight (A::table_name, "\"imageHeight\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::frameSequence_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  frameSequence (A::table_name, "\"frameSequence\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::frameTotal_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  frameTotal (A::table_name, "\"frameTotal\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::lastExposureTime_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  lastExposureTime (A::table_name, "\"lastExposureTime\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::EM_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  EM (A::table_name, "\"EM\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::baseline_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  baseline (A::table_name, "\"baseline\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::J2000RightAscension_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  J2000RightAscension (A::table_name, "\"J2000RightAscension\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::J2000Declination_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  J2000Declination (A::table_name, "\"J2000Declination\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::exposureTime_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  exposureTime (A::table_name, "\"exposureTime\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::delayTime_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  delayTime (A::table_name, "\"delayTime\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::coolerT_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  coolerT (A::table_name, "\"coolerT\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::targetCoolerT_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  targetCoolerT (A::table_name, "\"targetCoolerT\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::lastExposureDuration_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  lastExposureDuration (A::table_name, "\"lastExposureDuration\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::bitsOfPixel_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  bitsOfPixel (A::table_name, "\"bitsOfPixel\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::exposurePercent_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  exposurePercent (A::table_name, "\"exposurePercent\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::pixelScaleX_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  pixelScaleX (A::table_name, "\"pixelScaleX\"", 0);

  template <typename A>
  const typename query_columns< ::atccsccdstatus, id_pgsql, A >::pixelScaleY_type_
  query_columns< ::atccsccdstatus, id_pgsql, A >::
  pixelScaleY (A::table_name, "\"pixelScaleY\"", 0);

  template <typename A>
  struct pointer_query_columns< ::atccsccdstatus, id_pgsql, A >:
    query_columns< ::atccsccdstatus, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::atccsccdstatus, id_pgsql >:
    public access::object_traits< ::atccsccdstatus >
  {
    public:
    typedef object_traits_impl< ::atccspublicstatus, id_pgsql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::atccspublicstatus, id_pgsql >::image_type
    {
      // _observeName
      //
      details::buffer _observeName_value;
      std::size_t _observeName_size;
      bool _observeName_null;

      // _band
      //
      details::buffer _band_value;
      std::size_t _band_size;
      bool _band_null;

      // _lastTargetName
      //
      details::buffer _lastTargetName_value;
      std::size_t _lastTargetName_size;
      bool _lastTargetName_null;

      // _observeType
      //
      short _observeType_value;
      bool _observeType_null;

      // _epoch
      //
      short _epoch_value;
      bool _epoch_null;

      // _indexOfRSMode
      //
      short _indexOfRSMode_value;
      bool _indexOfRSMode_null;

      // _indexOfTSMode
      //
      short _indexOfTSMode_value;
      bool _indexOfTSMode_null;

      // _indexOfGainMode
      //
      short _indexOfGainMode_value;
      bool _indexOfGainMode_null;

      // _indexOfGain
      //
      short _indexOfGain_value;
      bool _indexOfGain_null;

      // _readMode
      //
      short _readMode_value;
      bool _readMode_null;

      // _exposureTriggerMode
      //
      short _exposureTriggerMode_value;
      bool _exposureTriggerMode_null;

      // _fanOn
      //
      short _fanOn_value;
      bool _fanOn_null;

      // _shutterMode
      //
      short _shutterMode_value;
      bool _shutterMode_null;

      // _isFullFrame
      //
      short _isFullFrame_value;
      bool _isFullFrame_null;

      // _isEM
      //
      short _isEM_value;
      bool _isEM_null;

      // _isNoiseFilter
      //
      short _isNoiseFilter_value;
      bool _isNoiseFilter_null;

      // _isBaseline
      //
      short _isBaseline_value;
      bool _isBaseline_null;

      // _binX
      //
      int _binX_value;
      bool _binX_null;

      // _binY
      //
      int _binY_value;
      bool _binY_null;

      // _startX
      //
      int _startX_value;
      bool _startX_null;

      // _startY
      //
      int _startY_value;
      bool _startY_null;

      // _imageWidth
      //
      int _imageWidth_value;
      bool _imageWidth_null;

      // _imageHeight
      //
      int _imageHeight_value;
      bool _imageHeight_null;

      // _frameSequence
      //
      int _frameSequence_value;
      bool _frameSequence_null;

      // _frameTotal
      //
      int _frameTotal_value;
      bool _frameTotal_null;

      // _lastExposureTime
      //
      int _lastExposureTime_value;
      bool _lastExposureTime_null;

      // _EM
      //
      int _EM_value;
      bool _EM_null;

      // _baseline
      //
      int _baseline_value;
      bool _baseline_null;

      // _J2000RightAscension
      //
      double _J2000RightAscension_value;
      bool _J2000RightAscension_null;

      // _J2000Declination
      //
      double _J2000Declination_value;
      bool _J2000Declination_null;

      // _exposureTime
      //
      double _exposureTime_value;
      bool _exposureTime_null;

      // _delayTime
      //
      double _delayTime_value;
      bool _delayTime_null;

      // _coolerT
      //
      double _coolerT_value;
      bool _coolerT_null;

      // _targetCoolerT
      //
      double _targetCoolerT_value;
      bool _targetCoolerT_null;

      // _lastExposureDuration
      //
      double _lastExposureDuration_value;
      bool _lastExposureDuration_null;

      // _bitsOfPixel
      //
      double _bitsOfPixel_value;
      bool _bitsOfPixel_null;

      // _exposurePercent
      //
      double _exposurePercent_value;
      bool _exposurePercent_null;

      // _pixelScaleX
      //
      double _pixelScaleX_value;
      bool _pixelScaleX_null;

      // _pixelScaleY
      //
      double _pixelScaleY_value;
      bool _pixelScaleY_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // atccsccdstatus
  //
}

#include "atccsccdstatus-odb.ixx"

#include <odb/post.hxx>

#endif // ATCCSCCDSTATUS_ODB_HXX
