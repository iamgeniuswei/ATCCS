// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "atccsdpmstatus-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // atccsdpmstatus
  //

  bool access::object_traits_impl< ::atccsdpmstatus, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // atccspublicstatus base
    //
    if (object_traits_impl< ::atccspublicstatus, id_pgsql >::grow (
          i, t + 0UL))
      grew = true;

    // _imagePath
    //
    if (t[8UL])
    {
      i._imagePath_value.capacity (i._imagePath_size);
      grew = true;
    }

    // _objectName
    //
    if (t[9UL])
    {
      i._objectName_value.capacity (i._objectName_size);
      grew = true;
    }

    // _objectType
    //
    t[10UL] = 0;

    // _rightAscension
    //
    t[11UL] = 0;

    // _declination
    //
    t[12UL] = 0;

    // _epoch
    //
    t[13UL] = 0;

    // _band
    //
    if (t[14UL])
    {
      i._band_value.capacity (i._band_size);
      grew = true;
    }

    // _observeStatus
    //
    t[15UL] = 0;

    // _binX
    //
    t[16UL] = 0;

    // _binY
    //
    t[17UL] = 0;

    // _startX
    //
    t[18UL] = 0;

    // _startY
    //
    t[19UL] = 0;

    // _imageWidth
    //
    t[20UL] = 0;

    // _imageHeight
    //
    t[21UL] = 0;

    // _exposureTime
    //
    t[22UL] = 0;

    // _indexOfGainMode
    //
    t[23UL] = 0;

    // _indexOfRSMode
    //
    t[24UL] = 0;

    // _indexOfTSMode
    //
    t[25UL] = 0;

    // _indexOfGainGear
    //
    t[26UL] = 0;

    // _indexOfRMode
    //
    t[27UL] = 0;

    // _gain
    //
    t[28UL] = 0;

    // _noise
    //
    t[29UL] = 0;

    // _coolerT
    //
    t[30UL] = 0;

    // _targetCoolerT
    //
    t[31UL] = 0;

    // _bitsOfPixel
    //
    t[32UL] = 0;

    // _exposureTriggerMode
    //
    t[33UL] = 0;

    // _indexOfCoolerMode
    //
    t[34UL] = 0;

    // _fanStatus
    //
    t[35UL] = 0;

    // _imageMeanValue
    //
    t[36UL] = 0;

    // _imageRMS
    //
    t[37UL] = 0;

    // _astrologyHHFW
    //
    t[38UL] = 0;

    // _imageCenterRightAscension
    //
    t[39UL] = 0;

    // _imageCenterDeclination
    //
    t[40UL] = 0;

    // _missX
    //
    t[41UL] = 0;

    // _missY
    //
    t[42UL] = 0;

    // _missAxis1
    //
    t[43UL] = 0;

    // _missAxis2
    //
    t[44UL] = 0;

    // _atmosphericTransparency
    //
    t[45UL] = 0;

    // _shutterMode
    //
    t[46UL] = 0;

    // _isFullFrame
    //
    t[47UL] = 0;

    // _isEM
    //
    t[48UL] = 0;

    // _EM
    //
    t[49UL] = 0;

    // _isNoiseFilter
    //
    t[50UL] = 0;

    // _isBaseline
    //
    t[51UL] = 0;

    // _isOverScan
    //
    t[52UL] = 0;

    // _pixelScaleX
    //
    t[53UL] = 0;

    // _pixelScaleY
    //
    t[54UL] = 0;

    // _temperature
    //
    t[55UL] = 0;

    // _fitsHead
    //
    t[56UL] = 0;

    return grew;
  }

  void access::object_traits_impl< ::atccsdpmstatus, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // atccspublicstatus base
    //
    object_traits_impl< ::atccspublicstatus, id_pgsql >::bind (b + n, i, sk);
    n += sk == statement_select ? 8UL : 7UL;

    // _imagePath
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._imagePath_value.data ();
    b[n].capacity = i._imagePath_value.capacity ();
    b[n].size = &i._imagePath_size;
    b[n].is_null = &i._imagePath_null;
    n++;

    // _objectName
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._objectName_value.data ();
    b[n].capacity = i._objectName_value.capacity ();
    b[n].size = &i._objectName_size;
    b[n].is_null = &i._objectName_null;
    n++;

    // _objectType
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._objectType_value;
    b[n].is_null = &i._objectType_null;
    n++;

    // _rightAscension
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._rightAscension_value;
    b[n].is_null = &i._rightAscension_null;
    n++;

    // _declination
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._declination_value;
    b[n].is_null = &i._declination_null;
    n++;

    // _epoch
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._epoch_value;
    b[n].is_null = &i._epoch_null;
    n++;

    // _band
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i._band_value.data ();
    b[n].capacity = i._band_value.capacity ();
    b[n].size = &i._band_size;
    b[n].is_null = &i._band_null;
    n++;

    // _observeStatus
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._observeStatus_value;
    b[n].is_null = &i._observeStatus_null;
    n++;

    // _binX
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._binX_value;
    b[n].is_null = &i._binX_null;
    n++;

    // _binY
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._binY_value;
    b[n].is_null = &i._binY_null;
    n++;

    // _startX
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._startX_value;
    b[n].is_null = &i._startX_null;
    n++;

    // _startY
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._startY_value;
    b[n].is_null = &i._startY_null;
    n++;

    // _imageWidth
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._imageWidth_value;
    b[n].is_null = &i._imageWidth_null;
    n++;

    // _imageHeight
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._imageHeight_value;
    b[n].is_null = &i._imageHeight_null;
    n++;

    // _exposureTime
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._exposureTime_value;
    b[n].is_null = &i._exposureTime_null;
    n++;

    // _indexOfGainMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfGainMode_value;
    b[n].is_null = &i._indexOfGainMode_null;
    n++;

    // _indexOfRSMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfRSMode_value;
    b[n].is_null = &i._indexOfRSMode_null;
    n++;

    // _indexOfTSMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfTSMode_value;
    b[n].is_null = &i._indexOfTSMode_null;
    n++;

    // _indexOfGainGear
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfGainGear_value;
    b[n].is_null = &i._indexOfGainGear_null;
    n++;

    // _indexOfRMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfRMode_value;
    b[n].is_null = &i._indexOfRMode_null;
    n++;

    // _gain
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._gain_value;
    b[n].is_null = &i._gain_null;
    n++;

    // _noise
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._noise_value;
    b[n].is_null = &i._noise_null;
    n++;

    // _coolerT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._coolerT_value;
    b[n].is_null = &i._coolerT_null;
    n++;

    // _targetCoolerT
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._targetCoolerT_value;
    b[n].is_null = &i._targetCoolerT_null;
    n++;

    // _bitsOfPixel
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._bitsOfPixel_value;
    b[n].is_null = &i._bitsOfPixel_null;
    n++;

    // _exposureTriggerMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._exposureTriggerMode_value;
    b[n].is_null = &i._exposureTriggerMode_null;
    n++;

    // _indexOfCoolerMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._indexOfCoolerMode_value;
    b[n].is_null = &i._indexOfCoolerMode_null;
    n++;

    // _fanStatus
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._fanStatus_value;
    b[n].is_null = &i._fanStatus_null;
    n++;

    // _imageMeanValue
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._imageMeanValue_value;
    b[n].is_null = &i._imageMeanValue_null;
    n++;

    // _imageRMS
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._imageRMS_value;
    b[n].is_null = &i._imageRMS_null;
    n++;

    // _astrologyHHFW
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._astrologyHHFW_value;
    b[n].is_null = &i._astrologyHHFW_null;
    n++;

    // _imageCenterRightAscension
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._imageCenterRightAscension_value;
    b[n].is_null = &i._imageCenterRightAscension_null;
    n++;

    // _imageCenterDeclination
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._imageCenterDeclination_value;
    b[n].is_null = &i._imageCenterDeclination_null;
    n++;

    // _missX
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._missX_value;
    b[n].is_null = &i._missX_null;
    n++;

    // _missY
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._missY_value;
    b[n].is_null = &i._missY_null;
    n++;

    // _missAxis1
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._missAxis1_value;
    b[n].is_null = &i._missAxis1_null;
    n++;

    // _missAxis2
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._missAxis2_value;
    b[n].is_null = &i._missAxis2_null;
    n++;

    // _atmosphericTransparency
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._atmosphericTransparency_value;
    b[n].is_null = &i._atmosphericTransparency_null;
    n++;

    // _shutterMode
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._shutterMode_value;
    b[n].is_null = &i._shutterMode_null;
    n++;

    // _isFullFrame
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isFullFrame_value;
    b[n].is_null = &i._isFullFrame_null;
    n++;

    // _isEM
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isEM_value;
    b[n].is_null = &i._isEM_null;
    n++;

    // _EM
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i._EM_value;
    b[n].is_null = &i._EM_null;
    n++;

    // _isNoiseFilter
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isNoiseFilter_value;
    b[n].is_null = &i._isNoiseFilter_null;
    n++;

    // _isBaseline
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isBaseline_value;
    b[n].is_null = &i._isBaseline_null;
    n++;

    // _isOverScan
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._isOverScan_value;
    b[n].is_null = &i._isOverScan_null;
    n++;

    // _pixelScaleX
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._pixelScaleX_value;
    b[n].is_null = &i._pixelScaleX_null;
    n++;

    // _pixelScaleY
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._pixelScaleY_value;
    b[n].is_null = &i._pixelScaleY_null;
    n++;

    // _temperature
    //
    b[n].type = pgsql::bind::double_;
    b[n].buffer = &i._temperature_value;
    b[n].is_null = &i._temperature_null;
    n++;

    // _fitsHead
    //
    b[n].type = pgsql::bind::smallint;
    b[n].buffer = &i._fitsHead_value;
    b[n].is_null = &i._fitsHead_null;
    n++;
  }

  bool access::object_traits_impl< ::atccsdpmstatus, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // atccspublicstatus base
    //
    if (object_traits_impl< ::atccspublicstatus, id_pgsql >::init (i, o, sk))
      grew = true;

    // _imagePath
    //
    {
      ::std::string const& v =
        o._imagePath;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i._imagePath_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i._imagePath_value,
        size,
        is_null,
        v);
      i._imagePath_null = is_null;
      i._imagePath_size = size;
      grew = grew || (cap != i._imagePath_value.capacity ());
    }

    // _objectName
    //
    {
      ::std::string const& v =
        o._objectName;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i._objectName_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i._objectName_value,
        size,
        is_null,
        v);
      i._objectName_null = is_null;
      i._objectName_size = size;
      grew = grew || (cap != i._objectName_value.capacity ());
    }

    // _objectType
    //
    {
      short unsigned int const& v =
        o._objectType;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._objectType_value, is_null, v);
      i._objectType_null = is_null;
    }

    // _rightAscension
    //
    {
      double const& v =
        o._rightAscension;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._rightAscension_value, is_null, v);
      i._rightAscension_null = is_null;
    }

    // _declination
    //
    {
      double const& v =
        o._declination;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._declination_value, is_null, v);
      i._declination_null = is_null;
    }

    // _epoch
    //
    {
      short unsigned int const& v =
        o._epoch;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._epoch_value, is_null, v);
      i._epoch_null = is_null;
    }

    // _band
    //
    {
      ::std::string const& v =
        o._band;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i._band_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i._band_value,
        size,
        is_null,
        v);
      i._band_null = is_null;
      i._band_size = size;
      grew = grew || (cap != i._band_value.capacity ());
    }

    // _observeStatus
    //
    {
      short unsigned int const& v =
        o._observeStatus;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._observeStatus_value, is_null, v);
      i._observeStatus_null = is_null;
    }

    // _binX
    //
    {
      unsigned int const& v =
        o._binX;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._binX_value, is_null, v);
      i._binX_null = is_null;
    }

    // _binY
    //
    {
      unsigned int const& v =
        o._binY;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._binY_value, is_null, v);
      i._binY_null = is_null;
    }

    // _startX
    //
    {
      unsigned int const& v =
        o._startX;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._startX_value, is_null, v);
      i._startX_null = is_null;
    }

    // _startY
    //
    {
      unsigned int const& v =
        o._startY;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._startY_value, is_null, v);
      i._startY_null = is_null;
    }

    // _imageWidth
    //
    {
      unsigned int const& v =
        o._imageWidth;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._imageWidth_value, is_null, v);
      i._imageWidth_null = is_null;
    }

    // _imageHeight
    //
    {
      unsigned int const& v =
        o._imageHeight;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._imageHeight_value, is_null, v);
      i._imageHeight_null = is_null;
    }

    // _exposureTime
    //
    {
      double const& v =
        o._exposureTime;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._exposureTime_value, is_null, v);
      i._exposureTime_null = is_null;
    }

    // _indexOfGainMode
    //
    {
      short unsigned int const& v =
        o._indexOfGainMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfGainMode_value, is_null, v);
      i._indexOfGainMode_null = is_null;
    }

    // _indexOfRSMode
    //
    {
      short unsigned int const& v =
        o._indexOfRSMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfRSMode_value, is_null, v);
      i._indexOfRSMode_null = is_null;
    }

    // _indexOfTSMode
    //
    {
      short unsigned int const& v =
        o._indexOfTSMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfTSMode_value, is_null, v);
      i._indexOfTSMode_null = is_null;
    }

    // _indexOfGainGear
    //
    {
      short unsigned int const& v =
        o._indexOfGainGear;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfGainGear_value, is_null, v);
      i._indexOfGainGear_null = is_null;
    }

    // _indexOfRMode
    //
    {
      short unsigned int const& v =
        o._indexOfRMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfRMode_value, is_null, v);
      i._indexOfRMode_null = is_null;
    }

    // _gain
    //
    {
      short unsigned int const& v =
        o._gain;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._gain_value, is_null, v);
      i._gain_null = is_null;
    }

    // _noise
    //
    {
      double const& v =
        o._noise;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._noise_value, is_null, v);
      i._noise_null = is_null;
    }

    // _coolerT
    //
    {
      double const& v =
        o._coolerT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._coolerT_value, is_null, v);
      i._coolerT_null = is_null;
    }

    // _targetCoolerT
    //
    {
      double const& v =
        o._targetCoolerT;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._targetCoolerT_value, is_null, v);
      i._targetCoolerT_null = is_null;
    }

    // _bitsOfPixel
    //
    {
      double const& v =
        o._bitsOfPixel;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._bitsOfPixel_value, is_null, v);
      i._bitsOfPixel_null = is_null;
    }

    // _exposureTriggerMode
    //
    {
      short unsigned int const& v =
        o._exposureTriggerMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._exposureTriggerMode_value, is_null, v);
      i._exposureTriggerMode_null = is_null;
    }

    // _indexOfCoolerMode
    //
    {
      short unsigned int const& v =
        o._indexOfCoolerMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._indexOfCoolerMode_value, is_null, v);
      i._indexOfCoolerMode_null = is_null;
    }

    // _fanStatus
    //
    {
      short unsigned int const& v =
        o._fanStatus;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._fanStatus_value, is_null, v);
      i._fanStatus_null = is_null;
    }

    // _imageMeanValue
    //
    {
      double const& v =
        o._imageMeanValue;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._imageMeanValue_value, is_null, v);
      i._imageMeanValue_null = is_null;
    }

    // _imageRMS
    //
    {
      double const& v =
        o._imageRMS;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._imageRMS_value, is_null, v);
      i._imageRMS_null = is_null;
    }

    // _astrologyHHFW
    //
    {
      double const& v =
        o._astrologyHHFW;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._astrologyHHFW_value, is_null, v);
      i._astrologyHHFW_null = is_null;
    }

    // _imageCenterRightAscension
    //
    {
      double const& v =
        o._imageCenterRightAscension;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._imageCenterRightAscension_value, is_null, v);
      i._imageCenterRightAscension_null = is_null;
    }

    // _imageCenterDeclination
    //
    {
      double const& v =
        o._imageCenterDeclination;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._imageCenterDeclination_value, is_null, v);
      i._imageCenterDeclination_null = is_null;
    }

    // _missX
    //
    {
      double const& v =
        o._missX;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._missX_value, is_null, v);
      i._missX_null = is_null;
    }

    // _missY
    //
    {
      double const& v =
        o._missY;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._missY_value, is_null, v);
      i._missY_null = is_null;
    }

    // _missAxis1
    //
    {
      double const& v =
        o._missAxis1;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._missAxis1_value, is_null, v);
      i._missAxis1_null = is_null;
    }

    // _missAxis2
    //
    {
      double const& v =
        o._missAxis2;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._missAxis2_value, is_null, v);
      i._missAxis2_null = is_null;
    }

    // _atmosphericTransparency
    //
    {
      double const& v =
        o._atmosphericTransparency;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._atmosphericTransparency_value, is_null, v);
      i._atmosphericTransparency_null = is_null;
    }

    // _shutterMode
    //
    {
      short unsigned int const& v =
        o._shutterMode;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._shutterMode_value, is_null, v);
      i._shutterMode_null = is_null;
    }

    // _isFullFrame
    //
    {
      short unsigned int const& v =
        o._isFullFrame;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isFullFrame_value, is_null, v);
      i._isFullFrame_null = is_null;
    }

    // _isEM
    //
    {
      short unsigned int const& v =
        o._isEM;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isEM_value, is_null, v);
      i._isEM_null = is_null;
    }

    // _EM
    //
    {
      unsigned int const& v =
        o._EM;

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i._EM_value, is_null, v);
      i._EM_null = is_null;
    }

    // _isNoiseFilter
    //
    {
      short unsigned int const& v =
        o._isNoiseFilter;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isNoiseFilter_value, is_null, v);
      i._isNoiseFilter_null = is_null;
    }

    // _isBaseline
    //
    {
      short unsigned int const& v =
        o._isBaseline;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isBaseline_value, is_null, v);
      i._isBaseline_null = is_null;
    }

    // _isOverScan
    //
    {
      short unsigned int const& v =
        o._isOverScan;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._isOverScan_value, is_null, v);
      i._isOverScan_null = is_null;
    }

    // _pixelScaleX
    //
    {
      double const& v =
        o._pixelScaleX;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._pixelScaleX_value, is_null, v);
      i._pixelScaleX_null = is_null;
    }

    // _pixelScaleY
    //
    {
      double const& v =
        o._pixelScaleY;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._pixelScaleY_value, is_null, v);
      i._pixelScaleY_null = is_null;
    }

    // _temperature
    //
    {
      double const& v =
        o._temperature;

      bool is_null (false);
      pgsql::value_traits<
          double,
          pgsql::id_double >::set_image (
        i._temperature_value, is_null, v);
      i._temperature_null = is_null;
    }

    // _fitsHead
    //
    {
      short unsigned int const& v =
        o._fitsHead;

      bool is_null (false);
      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_image (
        i._fitsHead_value, is_null, v);
      i._fitsHead_null = is_null;
    }

    return grew;
  }

  void access::object_traits_impl< ::atccsdpmstatus, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // atccspublicstatus base
    //
    object_traits_impl< ::atccspublicstatus, id_pgsql >::init (o, i, db);

    // _imagePath
    //
    {
      ::std::string& v =
        o._imagePath;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i._imagePath_value,
        i._imagePath_size,
        i._imagePath_null);
    }

    // _objectName
    //
    {
      ::std::string& v =
        o._objectName;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i._objectName_value,
        i._objectName_size,
        i._objectName_null);
    }

    // _objectType
    //
    {
      short unsigned int& v =
        o._objectType;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._objectType_value,
        i._objectType_null);
    }

    // _rightAscension
    //
    {
      double& v =
        o._rightAscension;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._rightAscension_value,
        i._rightAscension_null);
    }

    // _declination
    //
    {
      double& v =
        o._declination;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._declination_value,
        i._declination_null);
    }

    // _epoch
    //
    {
      short unsigned int& v =
        o._epoch;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._epoch_value,
        i._epoch_null);
    }

    // _band
    //
    {
      ::std::string& v =
        o._band;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i._band_value,
        i._band_size,
        i._band_null);
    }

    // _observeStatus
    //
    {
      short unsigned int& v =
        o._observeStatus;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._observeStatus_value,
        i._observeStatus_null);
    }

    // _binX
    //
    {
      unsigned int& v =
        o._binX;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._binX_value,
        i._binX_null);
    }

    // _binY
    //
    {
      unsigned int& v =
        o._binY;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._binY_value,
        i._binY_null);
    }

    // _startX
    //
    {
      unsigned int& v =
        o._startX;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._startX_value,
        i._startX_null);
    }

    // _startY
    //
    {
      unsigned int& v =
        o._startY;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._startY_value,
        i._startY_null);
    }

    // _imageWidth
    //
    {
      unsigned int& v =
        o._imageWidth;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._imageWidth_value,
        i._imageWidth_null);
    }

    // _imageHeight
    //
    {
      unsigned int& v =
        o._imageHeight;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._imageHeight_value,
        i._imageHeight_null);
    }

    // _exposureTime
    //
    {
      double& v =
        o._exposureTime;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._exposureTime_value,
        i._exposureTime_null);
    }

    // _indexOfGainMode
    //
    {
      short unsigned int& v =
        o._indexOfGainMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfGainMode_value,
        i._indexOfGainMode_null);
    }

    // _indexOfRSMode
    //
    {
      short unsigned int& v =
        o._indexOfRSMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfRSMode_value,
        i._indexOfRSMode_null);
    }

    // _indexOfTSMode
    //
    {
      short unsigned int& v =
        o._indexOfTSMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfTSMode_value,
        i._indexOfTSMode_null);
    }

    // _indexOfGainGear
    //
    {
      short unsigned int& v =
        o._indexOfGainGear;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfGainGear_value,
        i._indexOfGainGear_null);
    }

    // _indexOfRMode
    //
    {
      short unsigned int& v =
        o._indexOfRMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfRMode_value,
        i._indexOfRMode_null);
    }

    // _gain
    //
    {
      short unsigned int& v =
        o._gain;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._gain_value,
        i._gain_null);
    }

    // _noise
    //
    {
      double& v =
        o._noise;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._noise_value,
        i._noise_null);
    }

    // _coolerT
    //
    {
      double& v =
        o._coolerT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._coolerT_value,
        i._coolerT_null);
    }

    // _targetCoolerT
    //
    {
      double& v =
        o._targetCoolerT;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._targetCoolerT_value,
        i._targetCoolerT_null);
    }

    // _bitsOfPixel
    //
    {
      double& v =
        o._bitsOfPixel;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._bitsOfPixel_value,
        i._bitsOfPixel_null);
    }

    // _exposureTriggerMode
    //
    {
      short unsigned int& v =
        o._exposureTriggerMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._exposureTriggerMode_value,
        i._exposureTriggerMode_null);
    }

    // _indexOfCoolerMode
    //
    {
      short unsigned int& v =
        o._indexOfCoolerMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._indexOfCoolerMode_value,
        i._indexOfCoolerMode_null);
    }

    // _fanStatus
    //
    {
      short unsigned int& v =
        o._fanStatus;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._fanStatus_value,
        i._fanStatus_null);
    }

    // _imageMeanValue
    //
    {
      double& v =
        o._imageMeanValue;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._imageMeanValue_value,
        i._imageMeanValue_null);
    }

    // _imageRMS
    //
    {
      double& v =
        o._imageRMS;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._imageRMS_value,
        i._imageRMS_null);
    }

    // _astrologyHHFW
    //
    {
      double& v =
        o._astrologyHHFW;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._astrologyHHFW_value,
        i._astrologyHHFW_null);
    }

    // _imageCenterRightAscension
    //
    {
      double& v =
        o._imageCenterRightAscension;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._imageCenterRightAscension_value,
        i._imageCenterRightAscension_null);
    }

    // _imageCenterDeclination
    //
    {
      double& v =
        o._imageCenterDeclination;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._imageCenterDeclination_value,
        i._imageCenterDeclination_null);
    }

    // _missX
    //
    {
      double& v =
        o._missX;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._missX_value,
        i._missX_null);
    }

    // _missY
    //
    {
      double& v =
        o._missY;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._missY_value,
        i._missY_null);
    }

    // _missAxis1
    //
    {
      double& v =
        o._missAxis1;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._missAxis1_value,
        i._missAxis1_null);
    }

    // _missAxis2
    //
    {
      double& v =
        o._missAxis2;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._missAxis2_value,
        i._missAxis2_null);
    }

    // _atmosphericTransparency
    //
    {
      double& v =
        o._atmosphericTransparency;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._atmosphericTransparency_value,
        i._atmosphericTransparency_null);
    }

    // _shutterMode
    //
    {
      short unsigned int& v =
        o._shutterMode;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._shutterMode_value,
        i._shutterMode_null);
    }

    // _isFullFrame
    //
    {
      short unsigned int& v =
        o._isFullFrame;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isFullFrame_value,
        i._isFullFrame_null);
    }

    // _isEM
    //
    {
      short unsigned int& v =
        o._isEM;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isEM_value,
        i._isEM_null);
    }

    // _EM
    //
    {
      unsigned int& v =
        o._EM;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i._EM_value,
        i._EM_null);
    }

    // _isNoiseFilter
    //
    {
      short unsigned int& v =
        o._isNoiseFilter;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isNoiseFilter_value,
        i._isNoiseFilter_null);
    }

    // _isBaseline
    //
    {
      short unsigned int& v =
        o._isBaseline;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isBaseline_value,
        i._isBaseline_null);
    }

    // _isOverScan
    //
    {
      short unsigned int& v =
        o._isOverScan;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._isOverScan_value,
        i._isOverScan_null);
    }

    // _pixelScaleX
    //
    {
      double& v =
        o._pixelScaleX;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._pixelScaleX_value,
        i._pixelScaleX_null);
    }

    // _pixelScaleY
    //
    {
      double& v =
        o._pixelScaleY;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._pixelScaleY_value,
        i._pixelScaleY_null);
    }

    // _temperature
    //
    {
      double& v =
        o._temperature;

      pgsql::value_traits<
          double,
          pgsql::id_double >::set_value (
        v,
        i._temperature_value,
        i._temperature_null);
    }

    // _fitsHead
    //
    {
      short unsigned int& v =
        o._fitsHead;

      pgsql::value_traits<
          short unsigned int,
          pgsql::id_smallint >::set_value (
        v,
        i._fitsHead_value,
        i._fitsHead_null);
    }
  }
}

#include <odb/post.hxx>
