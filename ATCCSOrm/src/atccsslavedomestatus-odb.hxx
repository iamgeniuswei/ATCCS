// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef ATCCSSLAVEDOMESTATUS_ODB_HXX
#define ATCCSSLAVEDOMESTATUS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "atccsslavedomestatus.h"

#include "atccspublicstatus-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // atccsslavedomestatus
  //
  template <>
  struct class_traits< ::atccsslavedomestatus >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::atccsslavedomestatus >
  {
    public:
    typedef ::atccsslavedomestatus object_type;
    typedef ::atccsslavedomestatus* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::atccspublicstatus >::id_type id_type;

    static const bool auto_id = object_traits< ::atccspublicstatus >::auto_id;

    static const bool abstract = true;

    static id_type
    id (const object_type&);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // atccsslavedomestatus
  //
  template <typename A>
  struct query_columns< ::atccsslavedomestatus, id_pgsql, A >:
    query_columns< ::atccspublicstatus, id_pgsql, A >
  {
    // atccspublicstatus
    //
    typedef query_columns< ::atccspublicstatus, id_pgsql, A > atccspublicstatus;

    // scuttleStatus
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    scuttleStatus_type_;

    static const scuttleStatus_type_ scuttleStatus;

    // shadeStatus
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    shadeStatus_type_;

    static const shadeStatus_type_ shadeStatus;

    // domePosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    domePosition_type_;

    static const domePosition_type_ domePosition;

    // scuttlePercent
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    scuttlePercent_type_;

    static const scuttlePercent_type_ scuttlePercent;

    // shadePosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    shadePosition_type_;

    static const shadePosition_type_ shadePosition;

    // targetDomePosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetDomePosition_type_;

    static const targetDomePosition_type_ targetDomePosition;

    // targetScuttlePosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetScuttlePosition_type_;

    static const targetScuttlePosition_type_ targetScuttlePosition;

    // targetShadePosition
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    targetShadePosition_type_;

    static const targetShadePosition_type_ targetShadePosition;
  };

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::scuttleStatus_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  scuttleStatus (A::table_name, "\"scuttleStatus\"", 0);

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::shadeStatus_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  shadeStatus (A::table_name, "\"shadeStatus\"", 0);

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::domePosition_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  domePosition (A::table_name, "\"domePosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::scuttlePercent_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  scuttlePercent (A::table_name, "\"scuttlePercent\"", 0);

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::shadePosition_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  shadePosition (A::table_name, "\"shadePosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::targetDomePosition_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  targetDomePosition (A::table_name, "\"targetDomePosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::targetScuttlePosition_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  targetScuttlePosition (A::table_name, "\"targetScuttlePosition\"", 0);

  template <typename A>
  const typename query_columns< ::atccsslavedomestatus, id_pgsql, A >::targetShadePosition_type_
  query_columns< ::atccsslavedomestatus, id_pgsql, A >::
  targetShadePosition (A::table_name, "\"targetShadePosition\"", 0);

  template <typename A>
  struct pointer_query_columns< ::atccsslavedomestatus, id_pgsql, A >:
    query_columns< ::atccsslavedomestatus, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::atccsslavedomestatus, id_pgsql >:
    public access::object_traits< ::atccsslavedomestatus >
  {
    public:
    typedef object_traits_impl< ::atccspublicstatus, id_pgsql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::atccspublicstatus, id_pgsql >::image_type
    {
      // _scuttleStatus
      //
      short _scuttleStatus_value;
      bool _scuttleStatus_null;

      // _shadeStatus
      //
      short _shadeStatus_value;
      bool _shadeStatus_null;

      // _domePosition
      //
      double _domePosition_value;
      bool _domePosition_null;

      // _scuttlePercent
      //
      double _scuttlePercent_value;
      bool _scuttlePercent_null;

      // _shadePosition
      //
      double _shadePosition_value;
      bool _shadePosition_null;

      // _targetDomePosition
      //
      double _targetDomePosition_value;
      bool _targetDomePosition_null;

      // _targetScuttlePosition
      //
      double _targetScuttlePosition_value;
      bool _targetScuttlePosition_null;

      // _targetShadePosition
      //
      double _targetShadePosition_value;
      bool _targetShadePosition_null;
    };

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);
  };

  // atccsslavedomestatus
  //
}

#include "atccsslavedomestatus-odb.ixx"

#include <odb/post.hxx>

#endif // ATCCSSLAVEDOMESTATUS_ODB_HXX
