// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "at60slavedomestatus-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // at60slavedomestatus
  //

  bool access::object_traits_impl< ::at60slavedomestatus, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // atccsslavedomestatus base
    //
    if (object_traits_impl< ::atccsslavedomestatus, id_pgsql >::grow (
          i, t + 0UL))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::at60slavedomestatus, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // atccsslavedomestatus base
    //
    object_traits_impl< ::atccsslavedomestatus, id_pgsql >::bind (b + n, i, sk);
    n += sk == statement_select ? 16UL : 15UL;
  }

  bool access::object_traits_impl< ::at60slavedomestatus, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // atccsslavedomestatus base
    //
    if (object_traits_impl< ::atccsslavedomestatus, id_pgsql >::init (i, o, sk))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::at60slavedomestatus, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // atccsslavedomestatus base
    //
    object_traits_impl< ::atccsslavedomestatus, id_pgsql >::init (o, i, db);
  }
}

#include <odb/post.hxx>
