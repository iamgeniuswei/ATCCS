// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CSREALTIMEDATA_ODB_HXX
#define CSREALTIMEDATA_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "csrealtimedata.h"

#include "emerealtimedata-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // csrealtimedata
  //
  template <>
  struct class_traits< ::csrealtimedata >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::csrealtimedata >
  {
    public:
    typedef ::csrealtimedata object_type;
    typedef ::csrealtimedata* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef object_traits< ::emerealtimedata >::id_type id_type;

    static const bool auto_id = object_traits< ::emerealtimedata >::auto_id;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // csrealtimedata
  //
  template <typename A>
  struct query_columns< ::csrealtimedata, id_pgsql, A >:
    query_columns< ::emerealtimedata, id_pgsql, A >
  {
    // emerealtimedata
    //
    typedef query_columns< ::emerealtimedata, id_pgsql, A > emerealtimedata;

    // RelSkyT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    RelSkyT_type_;

    static const RelSkyT_type_ RelSkyT;

    // AmbientT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    AmbientT_type_;

    static const AmbientT_type_ AmbientT;

    // SensorT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    SensorT_type_;

    static const SensorT_type_ SensorT;

    // RainF
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    RainF_type_;

    static const RainF_type_ RainF;

    // RainThreshV
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    RainThreshV_type_;

    static const RainThreshV_type_ RainThreshV;

    // wind
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    wind_type_;

    static const wind_type_ wind;

    // WindUnits
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        short unsigned int,
        pgsql::id_smallint >::query_type,
      pgsql::id_smallint >
    WindUnits_type_;

    static const WindUnits_type_ WindUnits;

    // HumidityPercent
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    HumidityPercent_type_;

    static const HumidityPercent_type_ HumidityPercent;

    // DewPointT
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    DewPointT_type_;

    static const DewPointT_type_ DewPointT;

    // DayLightV
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        double,
        pgsql::id_double >::query_type,
      pgsql::id_double >
    DayLightV_type_;

    static const DayLightV_type_ DayLightV;
  };

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::RelSkyT_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  RelSkyT (A::table_name, "\"RelSkyT\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::AmbientT_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  AmbientT (A::table_name, "\"AmbientT\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::SensorT_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  SensorT (A::table_name, "\"SensorT\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::RainF_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  RainF (A::table_name, "\"RainF\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::RainThreshV_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  RainThreshV (A::table_name, "\"RainThreshV\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::wind_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  wind (A::table_name, "\"wind\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::WindUnits_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  WindUnits (A::table_name, "\"WindUnits\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::HumidityPercent_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  HumidityPercent (A::table_name, "\"HumidityPercent\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::DewPointT_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  DewPointT (A::table_name, "\"DewPointT\"", 0);

  template <typename A>
  const typename query_columns< ::csrealtimedata, id_pgsql, A >::DayLightV_type_
  query_columns< ::csrealtimedata, id_pgsql, A >::
  DayLightV (A::table_name, "\"DayLightV\"", 0);

  template <typename A>
  struct pointer_query_columns< ::csrealtimedata, id_pgsql, A >:
    query_columns< ::csrealtimedata, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::csrealtimedata, id_pgsql >:
    public access::object_traits< ::csrealtimedata >
  {
    public:
    typedef object_traits_impl< ::emerealtimedata, id_pgsql >::id_image_type id_image_type;

    struct image_type: object_traits_impl< ::emerealtimedata, id_pgsql >::image_type
    {
      // _RelSkyT
      //
      double _RelSkyT_value;
      bool _RelSkyT_null;

      // _AmbientT
      //
      double _AmbientT_value;
      bool _AmbientT_null;

      // _SensorT
      //
      double _SensorT_value;
      bool _SensorT_null;

      // _RainF
      //
      short _RainF_value;
      bool _RainF_null;

      // _RainThreshV
      //
      short _RainThreshV_value;
      bool _RainThreshV_null;

      // _wind
      //
      double _wind_value;
      bool _wind_null;

      // _WindUnits
      //
      short _WindUnits_value;
      bool _WindUnits_null;

      // _HumidityPercent
      //
      double _HumidityPercent_value;
      bool _HumidityPercent_null;

      // _DewPointT
      //
      double _DewPointT_value;
      bool _DewPointT_null;

      // _DayLightV
      //
      double _DayLightV_value;
      bool _DayLightV_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::csrealtimedata, id_common >:
    public access::object_traits_impl< ::csrealtimedata, id_pgsql >
  {
  };

  // csrealtimedata
  //
}

#include "csrealtimedata-odb.ixx"

#include <odb/post.hxx>

#endif // CSREALTIMEDATA_ODB_HXX
